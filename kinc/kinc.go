//  Copyright (c) 2017 the Kore Development Team
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package kinc

/*
#cgo CFLAGS: -I.
#cgo CFLAGS: -I${SRCDIR}/../Sources
#cgo darwin CFLAGS: -I${SRCDIR}/../Backends/System/Apple/Sources -I${SRCDIR}/../Backends/System/POSIX/Sources -DKORE_MACOS=1 -DKORE_POSIX=1
#cgo linux CFLAGS: -I${SRCDIR}/../Backends/System/Linux/Sources -I${SRCDIR}/../Backends/System/POSIX/Sources -DKORE_LINUX=1 -DKORE_POSIX=1
#cgo darwin LDFLAGS: -framework Foundation -framework AVFoundation -framework IOKit -framework Cocoa -framework AppKit -framework CoreAudio -framework CoreMedia -framework CoreVideo
#cgo linux LDFLAGS: -lasound -ldl
#cgo darwin metal CFLAGS: -I${SRCDIR}/../Backends/Graphics4/OpenGL/Sources -I${SRCDIR}/../Backends/Graphics5/Metal/Sources -I${SRCDIR}/../Backends/Graphics4/G4onG5/Sources -DKORE_G4=1 -DKORE_G5=1 -DKORE_G4ONG5 -DKORE_METAL=1
#cgo darwin metal LDFLAGS: -framework Metal -framework MetalKit
#include "kinc/pch.h"
#include "kinc/window.h"
#include "kinc/display.h"
#include "kinc/color.h"
#include "kinc/image.h"
#include "kinc/system.h"
#include "kinc/audio1/audio.h"
#include "kinc/audio2/audio.h"
#include "kinc/graphics4/graphics.h"
#include "kinc/graphics4/constantlocation.h"
#include "kinc/graphics4/indexbuffer.h"
#include "kinc/graphics4/pipeline.h"
#include "kinc/graphics4/rendertarget.h"
#include "kinc/graphics4/shader.h"
#include "kinc/graphics4/texture.h"
#include "kinc/graphics4/texturearray.h"
#include "kinc/graphics4/textureunit.h"
#include "kinc/graphics4/vertexbuffer.h"
#include "kinc/graphics4/vertexstructure.h"
#include "kinc/graphics1/graphics.h"
#include "kinc/compute/compute.h"
#include "kinc/input/acceleration.h"
#include "kinc/input/gamepad.h"
#include "kinc/input/keyboard.h"
#include "kinc/input/mouse.h"
#include "kinc/input/pen.h"
#include "kinc/input/rotation.h"
#include "kinc/input/surface.h"
#include "kinc/math/core.h"
#include "kinc/math/matrix.h"
#include "kinc/math/random.h"
#include "kinc/math/vector.h"
#include "kinc/simd/float32x4.h"
#include "kinc/bridge.h"
#include <stdlib.h>
#include "cgo_helpers.h"

void GoUpdateCallback();
void updateCallback(){
	GoUpdateCallback();
}

void GoForegroundCallback();
void foregroundCallback(){
	GoForegroundCallback();
}

void GoBackgroundCallback();
void backgroundCallback(){
	GoBackgroundCallback();
}

void GoResumeCallback();
void resumeCallback(){
	GoResumeCallback();
}

void GoPauseCallback();
void pauseCallback(){
	GoPauseCallback();
}

void GoShutdownCallback();
void shutdownCallback(){
	GoShutdownCallback();
}

void GoLoginCallback();
void loginCallback(){
	GoLoginCallback();
}

void GoLogoutCallback();
void logoutCallback(){
	GoLogoutCallback();
}

*/
import "C"
import (
	"runtime"
	"unsafe"
)

// kinc_g4_texture_array_init function as declared in go-kinc/kinc.h:31
func kinc_g4_texture_array_init(array *kinc_g4_texture_array, textures []kinc_image, count int32) {
	carray, carrayAllocMap := array.PassRef()
	ctextures, ctexturesAllocMap := unpackArgSKinc_image(textures)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_texture_array_init(carray, ctextures, ccount)
	runtime.KeepAlive(ccountAllocMap)
	packSKinc_image(textures, ctextures)
	runtime.KeepAlive(ctexturesAllocMap)
	runtime.KeepAlive(carrayAllocMap)
}

// kinc_g4_texture_array_destroy function as declared in go-kinc/kinc.h:32
func kinc_g4_texture_array_destroy(array *kinc_g4_texture_array) {
	carray, carrayAllocMap := array.PassRef()
	C.kinc_g4_texture_array_destroy(carray)
	runtime.KeepAlive(carrayAllocMap)
}

// kinc_g4_vertex_element_init function as declared in go-kinc/kinc.h:52
func kinc_g4_vertex_element_init(element *kinc_g4_vertex_element, name string, data kinc_g4_vertex_data) {
	celement, celementAllocMap := element.PassRef()
	cname, cnameAllocMap := unpackPCharString(name)
	cdata, cdataAllocMap := (C.kinc_g4_vertex_data_t)(data), cgoAllocsUnknown
	C.kinc_g4_vertex_element_init(celement, cname, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(celementAllocMap)
}

// kinc_g4_vertex_structure_init function as declared in go-kinc/kinc.h:62
func kinc_g4_vertex_structure_init(structure *kinc_g4_vertex_structure) {
	cstructure, cstructureAllocMap := structure.PassRef()
	C.kinc_g4_vertex_structure_init(cstructure)
	runtime.KeepAlive(cstructureAllocMap)
}

// kinc_g4_vertex_structure_add function as declared in go-kinc/kinc.h:64
func kinc_g4_vertex_structure_add(structure *kinc_g4_vertex_structure, name string, data kinc_g4_vertex_data) {
	cstructure, cstructureAllocMap := structure.PassRef()
	cname, cnameAllocMap := unpackPCharString(name)
	cdata, cdataAllocMap := (C.kinc_g4_vertex_data_t)(data), cgoAllocsUnknown
	C.kinc_g4_vertex_structure_add(cstructure, cname, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cstructureAllocMap)
}

// kinc_g4_vertex_buffer_init function as declared in go-kinc/kinc.h:93
func kinc_g4_vertex_buffer_init(buffer *kinc_g4_vertex_buffer, count int32, structure *kinc_g4_vertex_structure, usage kinc_g4_usage, instance_data_step_rate int32) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cstructure, cstructureAllocMap := structure.PassRef()
	cusage, cusageAllocMap := (C.kinc_g4_usage_t)(usage), cgoAllocsUnknown
	cinstance_data_step_rate, cinstance_data_step_rateAllocMap := (C.int)(instance_data_step_rate), cgoAllocsUnknown
	C.kinc_g4_vertex_buffer_init(cbuffer, ccount, cstructure, cusage, cinstance_data_step_rate)
	runtime.KeepAlive(cinstance_data_step_rateAllocMap)
	runtime.KeepAlive(cusageAllocMap)
	runtime.KeepAlive(cstructureAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_vertex_buffer_destroy function as declared in go-kinc/kinc.h:95
func kinc_g4_vertex_buffer_destroy(buffer *kinc_g4_vertex_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_vertex_buffer_destroy(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_vertex_buffer_lock_all function as declared in go-kinc/kinc.h:96
func kinc_g4_vertex_buffer_lock_all(buffer *kinc_g4_vertex_buffer) []float32 {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	__ret := C.kinc_g4_vertex_buffer_lock_all(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	__v := *(*[]float32)(unsafe.Pointer(&__ret))
	return __v
}

// kinc_g4_vertex_buffer_lock function as declared in go-kinc/kinc.h:97
func kinc_g4_vertex_buffer_lock(buffer *kinc_g4_vertex_buffer, vertices []float32, start int32, count int32) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	cstart, cstartAllocMap := (C.int)(start), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_vertex_buffer_lock(cbuffer, cstart, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	// __v := *(*[]float32)(unsafe.Pointer(&__ret))

	buffer.impl.data = vertices
	buffer.impl.ref97e99f8d.data = unsafe.Pointer(&vertices)
}

// kinc_g4_vertex_buffer_unlock_all function as declared in go-kinc/kinc.h:98
func kinc_g4_vertex_buffer_unlock_all(buffer *kinc_g4_vertex_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_vertex_buffer_unlock_all(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_vertex_buffer_unlock function as declared in go-kinc/kinc.h:99
func kinc_g4_vertex_buffer_unlock(buffer *kinc_g4_vertex_buffer, count int32) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_vertex_buffer_unlock(cbuffer, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_vertex_buffer_count function as declared in go-kinc/kinc.h:100
func kinc_g4_vertex_buffer_count(buffer *kinc_g4_vertex_buffer) int32 {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	__ret := C.kinc_g4_vertex_buffer_count(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_g4_vertex_buffer_stride function as declared in go-kinc/kinc.h:101
func kinc_g4_vertex_buffer_stride(buffer *kinc_g4_vertex_buffer) int32 {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	__ret := C.kinc_g4_vertex_buffer_stride(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_internal_g4_vertex_buffer_set function as declared in go-kinc/kinc.h:103
func kinc_internal_g4_vertex_buffer_set(buffer *kinc_g4_vertex_buffer, offset int32) int32 {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	coffset, coffsetAllocMap := (C.int)(offset), cgoAllocsUnknown
	__ret := C.kinc_internal_g4_vertex_buffer_set(cbuffer, coffset)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_g4_set_vertex_buffers function as declared in go-kinc/kinc.h:105
func kinc_g4_set_vertex_buffers(buffers []*kinc_g4_vertex_buffer, count int32) {
	cbuffers, cbuffersAllocMap := unpackArgSPKinc_g4_vertex_buffer(buffers)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_set_vertex_buffers(cbuffers, ccount)
	runtime.KeepAlive(ccountAllocMap)
	packSPKinc_g4_vertex_buffer(buffers, cbuffers)
	runtime.KeepAlive(cbuffersAllocMap)
}

// kinc_g4_set_vertex_buffer function as declared in go-kinc/kinc.h:106
func kinc_g4_set_vertex_buffer(buffer *kinc_g4_vertex_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_set_vertex_buffer(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_compute_shader_init function as declared in go-kinc/kinc.h:127
func kinc_compute_shader_init(shader *kinc_compute_shader, source unsafe.Pointer, length int32) {
	cshader, cshaderAllocMap := shader.PassRef()
	csource, csourceAllocMap := source, cgoAllocsUnknown
	clength, clengthAllocMap := (C.int)(length), cgoAllocsUnknown
	C.kinc_compute_shader_init(cshader, csource, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(csourceAllocMap)
	runtime.KeepAlive(cshaderAllocMap)
}

// kinc_compute_shader_destroy function as declared in go-kinc/kinc.h:128
func kinc_compute_shader_destroy(shader *kinc_compute_shader) {
	cshader, cshaderAllocMap := shader.PassRef()
	C.kinc_compute_shader_destroy(cshader)
	runtime.KeepAlive(cshaderAllocMap)
}

// kinc_compute_shader_get_constant_location function as declared in go-kinc/kinc.h:129
func kinc_compute_shader_get_constant_location(shader *kinc_compute_shader, name string) kinc_compute_constant_location {
	cshader, cshaderAllocMap := shader.PassRef()
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.kinc_compute_shader_get_constant_location(cshader, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cshaderAllocMap)
	__v := *Newkinc_compute_constant_locationRef(unsafe.Pointer(&__ret))
	return __v
}

// kinc_compute_shader_get_texture_unit function as declared in go-kinc/kinc.h:130
func kinc_compute_shader_get_texture_unit(shader *kinc_compute_shader, name string) kinc_compute_texture_unit {
	cshader, cshaderAllocMap := shader.PassRef()
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.kinc_compute_shader_get_texture_unit(cshader, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cshaderAllocMap)
	__v := *Newkinc_compute_texture_unitRef(unsafe.Pointer(&__ret))
	return __v
}

// kinc_g4_texture_init function as declared in go-kinc/kinc.h:172
func kinc_g4_texture_init(texture *kinc_g4_texture, width int32, height int32, format kinc_image_format) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	C.kinc_g4_texture_init(ctexture, cwidth, cheight, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_init3d function as declared in go-kinc/kinc.h:173
func kinc_g4_texture_init3d(texture *kinc_g4_texture, width int32, height int32, depth int32, format kinc_image_format) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cdepth, cdepthAllocMap := (C.int)(depth), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	C.kinc_g4_texture_init3d(ctexture, cwidth, cheight, cdepth, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cdepthAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_init_from_image function as declared in go-kinc/kinc.h:174
func kinc_g4_texture_init_from_image(texture *kinc_g4_texture, image *kinc_image) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cimage, cimageAllocMap := image.PassRef()
	C.kinc_g4_texture_init_from_image(ctexture, cimage)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_init_from_image3d function as declared in go-kinc/kinc.h:175
func kinc_g4_texture_init_from_image3d(texture *kinc_g4_texture, image *kinc_image) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cimage, cimageAllocMap := image.PassRef()
	C.kinc_g4_texture_init_from_image3d(ctexture, cimage)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_destroy function as declared in go-kinc/kinc.h:176
func kinc_g4_texture_destroy(texture *kinc_g4_texture) {
	ctexture, ctextureAllocMap := texture.PassRef()
	C.kinc_g4_texture_destroy(ctexture)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_lock function as declared in go-kinc/kinc.h:181
func kinc_g4_texture_lock(texture *kinc_g4_texture) []byte {
	ctexture, ctextureAllocMap := texture.PassRef()
	__ret := C.kinc_g4_texture_lock(ctexture)
	runtime.KeepAlive(ctextureAllocMap)
	__v := *([]byte)(unsafe.Pointer(&__ret))
	return __v
}

// kinc_g4_texture_unlock function as declared in go-kinc/kinc.h:182
func kinc_g4_texture_unlock(texture *kinc_g4_texture) {
	ctexture, ctextureAllocMap := texture.PassRef()
	C.kinc_g4_texture_unlock(ctexture)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_clear function as declared in go-kinc/kinc.h:183
func kinc_g4_texture_clear(texture *kinc_g4_texture, x int32, y int32, z int32, width int32, height int32, depth int32, color uint32) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cz, czAllocMap := (C.int)(z), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cdepth, cdepthAllocMap := (C.int)(depth), cgoAllocsUnknown
	ccolor, ccolorAllocMap := (C.uint)(color), cgoAllocsUnknown
	C.kinc_g4_texture_clear(ctexture, cx, cy, cz, cwidth, cheight, cdepth, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cdepthAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(czAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_upload function as declared in go-kinc/kinc.h:184
func kinc_g4_texture_upload(texture *kinc_g4_texture, data []byte, stride int32) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cdata, cdataAllocMap := copyPUint8Bytes((*sliceHeader)(unsafe.Pointer(&data)))
	cstride, cstrideAllocMap := (C.int)(stride), cgoAllocsUnknown
	C.kinc_g4_texture_upload(ctexture, cdata, cstride)
	runtime.KeepAlive(cstrideAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_generate_mipmaps function as declared in go-kinc/kinc.h:185
func kinc_g4_texture_generate_mipmaps(texture *kinc_g4_texture, levels int32) {
	ctexture, ctextureAllocMap := texture.PassRef()
	clevels, clevelsAllocMap := (C.int)(levels), cgoAllocsUnknown
	C.kinc_g4_texture_generate_mipmaps(ctexture, clevels)
	runtime.KeepAlive(clevelsAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_set_mipmap function as declared in go-kinc/kinc.h:186
func kinc_g4_texture_set_mipmap(texture *kinc_g4_texture, mipmap *kinc_image, level int32) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cmipmap, cmipmapAllocMap := mipmap.PassRef()
	clevel, clevelAllocMap := (C.int)(level), cgoAllocsUnknown
	C.kinc_g4_texture_set_mipmap(ctexture, cmipmap, clevel)
	runtime.KeepAlive(clevelAllocMap)
	runtime.KeepAlive(cmipmapAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_texture_stride function as declared in go-kinc/kinc.h:188
func kinc_g4_texture_stride(texture *kinc_g4_texture) int32 {
	ctexture, ctextureAllocMap := texture.PassRef()
	__ret := C.kinc_g4_texture_stride(ctexture)
	runtime.KeepAlive(ctextureAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_compute_set_bool function as declared in go-kinc/kinc.h:192
func kinc_compute_set_bool(location kinc_compute_constant_location, value bool) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := (C._Bool)(value), cgoAllocsUnknown
	C.kinc_compute_set_bool(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_int function as declared in go-kinc/kinc.h:193
func kinc_compute_set_int(location kinc_compute_constant_location, value int32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := (C.int)(value), cgoAllocsUnknown
	C.kinc_compute_set_int(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_float function as declared in go-kinc/kinc.h:194
func kinc_compute_set_float(location kinc_compute_constant_location, value float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kinc_compute_set_float(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_float2 function as declared in go-kinc/kinc.h:195
func kinc_compute_set_float2(location kinc_compute_constant_location, value1 float32, value2 float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue1, cvalue1AllocMap := (C.float)(value1), cgoAllocsUnknown
	cvalue2, cvalue2AllocMap := (C.float)(value2), cgoAllocsUnknown
	C.kinc_compute_set_float2(clocation, cvalue1, cvalue2)
	runtime.KeepAlive(cvalue2AllocMap)
	runtime.KeepAlive(cvalue1AllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_float3 function as declared in go-kinc/kinc.h:196
func kinc_compute_set_float3(location kinc_compute_constant_location, value1 float32, value2 float32, value3 float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue1, cvalue1AllocMap := (C.float)(value1), cgoAllocsUnknown
	cvalue2, cvalue2AllocMap := (C.float)(value2), cgoAllocsUnknown
	cvalue3, cvalue3AllocMap := (C.float)(value3), cgoAllocsUnknown
	C.kinc_compute_set_float3(clocation, cvalue1, cvalue2, cvalue3)
	runtime.KeepAlive(cvalue3AllocMap)
	runtime.KeepAlive(cvalue2AllocMap)
	runtime.KeepAlive(cvalue1AllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_float4 function as declared in go-kinc/kinc.h:197
func kinc_compute_set_float4(location kinc_compute_constant_location, value1 float32, value2 float32, value3 float32, value4 float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue1, cvalue1AllocMap := (C.float)(value1), cgoAllocsUnknown
	cvalue2, cvalue2AllocMap := (C.float)(value2), cgoAllocsUnknown
	cvalue3, cvalue3AllocMap := (C.float)(value3), cgoAllocsUnknown
	cvalue4, cvalue4AllocMap := (C.float)(value4), cgoAllocsUnknown
	C.kinc_compute_set_float4(clocation, cvalue1, cvalue2, cvalue3, cvalue4)
	runtime.KeepAlive(cvalue4AllocMap)
	runtime.KeepAlive(cvalue3AllocMap)
	runtime.KeepAlive(cvalue2AllocMap)
	runtime.KeepAlive(cvalue1AllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_floats function as declared in go-kinc/kinc.h:198
func kinc_compute_set_floats(location kinc_compute_constant_location, values []float32, count int32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalues, cvaluesAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&values)))
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_compute_set_floats(clocation, cvalues, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cvaluesAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_matrix4 function as declared in go-kinc/kinc.h:199
func kinc_compute_set_matrix4(location kinc_compute_constant_location, value *kinc_matrix4x4) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := value.PassRef()
	C.kinc_compute_set_matrix4(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_matrix3 function as declared in go-kinc/kinc.h:200
func kinc_compute_set_matrix3(location kinc_compute_constant_location, value *kinc_matrix3x3) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := value.PassRef()
	C.kinc_compute_set_matrix3(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_compute_set_texture function as declared in go-kinc/kinc.h:202
func kinc_compute_set_texture(unit kinc_compute_texture_unit, texture *kinc_g4_texture, access kinc_compute_access) {
	cunit, cunitAllocMap := unit.PassValue()
	ctexture, ctextureAllocMap := texture.PassRef()
	caccess, caccessAllocMap := (C.kinc_compute_access_t)(access), cgoAllocsUnknown
	C.kinc_compute_set_texture(cunit, ctexture, caccess)
	runtime.KeepAlive(caccessAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_render_target function as declared in go-kinc/kinc.h:203
func kinc_compute_set_render_target(unit kinc_compute_texture_unit, texture *kinc_g4_render_target, access kinc_compute_access) {
	cunit, cunitAllocMap := unit.PassValue()
	ctexture, ctextureAllocMap := texture.PassRef()
	caccess, caccessAllocMap := (C.kinc_compute_access_t)(access), cgoAllocsUnknown
	C.kinc_compute_set_render_target(cunit, ctexture, caccess)
	runtime.KeepAlive(caccessAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_sampled_texture function as declared in go-kinc/kinc.h:204
func kinc_compute_set_sampled_texture(unit kinc_compute_texture_unit, texture *kinc_g4_texture) {
	cunit, cunitAllocMap := unit.PassValue()
	ctexture, ctextureAllocMap := texture.PassRef()
	C.kinc_compute_set_sampled_texture(cunit, ctexture)
	runtime.KeepAlive(ctextureAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_sampled_render_target function as declared in go-kinc/kinc.h:205
func kinc_compute_set_sampled_render_target(unit kinc_compute_texture_unit, target *kinc_g4_render_target) {
	cunit, cunitAllocMap := unit.PassValue()
	ctarget, ctargetAllocMap := target.PassRef()
	C.kinc_compute_set_sampled_render_target(cunit, ctarget)
	runtime.KeepAlive(ctargetAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_sampled_depth_from_render_target function as declared in go-kinc/kinc.h:206
func kinc_compute_set_sampled_depth_from_render_target(unit kinc_compute_texture_unit, target *kinc_g4_render_target) {
	cunit, cunitAllocMap := unit.PassValue()
	ctarget, ctargetAllocMap := target.PassRef()
	C.kinc_compute_set_sampled_depth_from_render_target(cunit, ctarget)
	runtime.KeepAlive(ctargetAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture_addressing function as declared in go-kinc/kinc.h:207
func kinc_compute_set_texture_addressing(unit kinc_compute_texture_unit, dir kinc_g4_texture_direction, addressing kinc_g4_texture_addressing) {
	cunit, cunitAllocMap := unit.PassValue()
	cdir, cdirAllocMap := (C.kinc_g4_texture_direction_t)(dir), cgoAllocsUnknown
	caddressing, caddressingAllocMap := (C.kinc_g4_texture_addressing_t)(addressing), cgoAllocsUnknown
	C.kinc_compute_set_texture_addressing(cunit, cdir, caddressing)
	runtime.KeepAlive(caddressingAllocMap)
	runtime.KeepAlive(cdirAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture_magnification_filter function as declared in go-kinc/kinc.h:208
func kinc_compute_set_texture_magnification_filter(unit kinc_compute_texture_unit, filter kinc_g4_texture_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_compute_set_texture_magnification_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture_minification_filter function as declared in go-kinc/kinc.h:209
func kinc_compute_set_texture_minification_filter(unit kinc_compute_texture_unit, filter kinc_g4_texture_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_compute_set_texture_minification_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture_mipmap_filter function as declared in go-kinc/kinc.h:210
func kinc_compute_set_texture_mipmap_filter(unit kinc_compute_texture_unit, filter kinc_g4_mipmap_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_mipmap_filter_t)(filter), cgoAllocsUnknown
	C.kinc_compute_set_texture_mipmap_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture3d_addressing function as declared in go-kinc/kinc.h:211
func kinc_compute_set_texture3d_addressing(unit kinc_compute_texture_unit, dir kinc_g4_texture_direction, addressing kinc_g4_texture_addressing) {
	cunit, cunitAllocMap := unit.PassValue()
	cdir, cdirAllocMap := (C.kinc_g4_texture_direction_t)(dir), cgoAllocsUnknown
	caddressing, caddressingAllocMap := (C.kinc_g4_texture_addressing_t)(addressing), cgoAllocsUnknown
	C.kinc_compute_set_texture3d_addressing(cunit, cdir, caddressing)
	runtime.KeepAlive(caddressingAllocMap)
	runtime.KeepAlive(cdirAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture3d_magnification_filter function as declared in go-kinc/kinc.h:212
func kinc_compute_set_texture3d_magnification_filter(unit kinc_compute_texture_unit, filter kinc_g4_texture_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_compute_set_texture3d_magnification_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture3d_minification_filter function as declared in go-kinc/kinc.h:213
func kinc_compute_set_texture3d_minification_filter(unit kinc_compute_texture_unit, filter kinc_g4_texture_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_compute_set_texture3d_minification_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_texture3d_mipmap_filter function as declared in go-kinc/kinc.h:214
func kinc_compute_set_texture3d_mipmap_filter(unit kinc_compute_texture_unit, filter kinc_g4_mipmap_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_mipmap_filter_t)(filter), cgoAllocsUnknown
	C.kinc_compute_set_texture3d_mipmap_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_compute_set_shader function as declared in go-kinc/kinc.h:215
func kinc_compute_set_shader(shader *kinc_compute_shader) {
	cshader, cshaderAllocMap := shader.PassRef()
	C.kinc_compute_set_shader(cshader)
	runtime.KeepAlive(cshaderAllocMap)
}

// kinc_compute function as declared in go-kinc/kinc.h:216
func kinc_compute(x int32, y int32, z int32) {
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cz, czAllocMap := (C.int)(z), cgoAllocsUnknown
	C.kinc_compute(cx, cy, cz)
	runtime.KeepAlive(czAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
}

// kinc_color_components function as declared in kinc/color.h:9
func kinc_color_components(color uint32, red *float32, green *float32, blue *float32, alpha *float32) {
	ccolor, ccolorAllocMap := (C.uint32_t)(color), cgoAllocsUnknown
	cred, credAllocMap := (*C.float)(unsafe.Pointer(red)), cgoAllocsUnknown
	cgreen, cgreenAllocMap := (*C.float)(unsafe.Pointer(green)), cgoAllocsUnknown
	cblue, cblueAllocMap := (*C.float)(unsafe.Pointer(blue)), cgoAllocsUnknown
	calpha, calphaAllocMap := (*C.float)(unsafe.Pointer(alpha)), cgoAllocsUnknown //copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&alpha)))
	C.kinc_color_components(ccolor, cred, cgreen, cblue, calpha)
	runtime.KeepAlive(calphaAllocMap)
	runtime.KeepAlive(cblueAllocMap)
	runtime.KeepAlive(cgreenAllocMap)
	runtime.KeepAlive(credAllocMap)
	runtime.KeepAlive(ccolorAllocMap)
}

// kinc_primary_display function as declared in kinc/display.h:36
func kinc_primary_display() int32 {
	__ret := C.kinc_primary_display()
	__v := (int32)(__ret)
	return __v
}

// kinc_count_displays function as declared in kinc/display.h:45
func kinc_count_displays() int32 {
	__ret := C.kinc_count_displays()
	__v := (int32)(__ret)
	return __v
}

// kinc_display_available function as declared in kinc/display.h:55
func kinc_display_available(display_index int32) bool {
	cdisplay_index, cdisplay_indexAllocMap := (C.int)(display_index), cgoAllocsUnknown
	__ret := C.kinc_display_available(cdisplay_index)
	runtime.KeepAlive(cdisplay_indexAllocMap)
	__v := (bool)(__ret)
	return __v
}

// kinc_display_name function as declared in kinc/display.h:62
func kinc_display_name(display_index int32) string {
	cdisplay_index, cdisplay_indexAllocMap := (C.int)(display_index), cgoAllocsUnknown
	__ret := C.kinc_display_name(cdisplay_index)
	runtime.KeepAlive(cdisplay_indexAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// kinc_display_current_mode function as declared in kinc/display.h:69
func kinc_display_current_mode(display_index int32) kinc_display_mode {
	cdisplay_index, cdisplay_indexAllocMap := (C.int)(display_index), cgoAllocsUnknown
	__ret := C.kinc_display_current_mode(cdisplay_index)
	runtime.KeepAlive(cdisplay_indexAllocMap)
	__v := *Newkinc_display_modeRef(unsafe.Pointer(&__ret))
	return __v
}

// kinc_display_count_available_modes function as declared in kinc/display.h:76
func kinc_display_count_available_modes(display_index int32) int32 {
	cdisplay_index, cdisplay_indexAllocMap := (C.int)(display_index), cgoAllocsUnknown
	__ret := C.kinc_display_count_available_modes(cdisplay_index)
	runtime.KeepAlive(cdisplay_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_display_available_mode function as declared in kinc/display.h:84
func kinc_display_available_mode(display_index int32, mode_index int32) kinc_display_mode {
	cdisplay_index, cdisplay_indexAllocMap := (C.int)(display_index), cgoAllocsUnknown
	cmode_index, cmode_indexAllocMap := (C.int)(mode_index), cgoAllocsUnknown
	__ret := C.kinc_display_available_mode(cdisplay_index, cmode_index)
	runtime.KeepAlive(cmode_indexAllocMap)
	runtime.KeepAlive(cdisplay_indexAllocMap)
	__v := *Newkinc_display_modeRef(unsafe.Pointer(&__ret))
	return __v
}

// kinc_init function as declared in kinc/system.h:14
func kinc_init(name string, width int32, height int32, win *kinc_window_options, frame *kinc_framebuffer_options) int32 {
	cname, cnameAllocMap := unpackPCharString(name)
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cwin, cwinAllocMap := win.PassRef()
	cframe, cframeAllocMap := frame.PassRef()
	__ret := C.kinc_init(cname, cwidth, cheight, cwin, cframe)
	runtime.KeepAlive(cframeAllocMap)
	runtime.KeepAlive(cwinAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_application_name function as declared in kinc/system.h:16
func kinc_application_name() string {
	__ret := C.kinc_application_name()
	__v := packPCharString(__ret)
	return __v
}

// kinc_set_application_name function as declared in kinc/system.h:17
func kinc_set_application_name(name string) {
	cname, cnameAllocMap := unpackPCharString(name)
	C.kinc_set_application_name(cname)
	runtime.KeepAlive(cnameAllocMap)
}

// kinc_width function as declared in kinc/system.h:18
func kinc_width() int32 {
	__ret := C.kinc_width()
	__v := (int32)(__ret)
	return __v
}

// kinc_height function as declared in kinc/system.h:19
func kinc_height() int32 {
	__ret := C.kinc_height()
	__v := (int32)(__ret)
	return __v
}

// kinc_internal_handle_messages function as declared in kinc/system.h:21
func kinc_internal_handle_messages() bool {
	__ret := C.kinc_internal_handle_messages()
	__v := (bool)(__ret)
	return __v
}

// kinc_load_url function as declared in kinc/system.h:23
func kinc_load_url(url string) {
	curl, curlAllocMap := unpackPCharString(url)
	C.kinc_load_url(curl)
	runtime.KeepAlive(curlAllocMap)
}

// kinc_system_id function as declared in kinc/system.h:25
func kinc_system_id() string {
	__ret := C.kinc_system_id()
	__v := packPCharString(__ret)
	return __v
}

// kinc_internal_save_path function as declared in kinc/system.h:27
func kinc_internal_save_path() string {
	__ret := C.kinc_internal_save_path()
	__v := packPCharString(__ret)
	return __v
}

// kinc_video_formats function as declared in kinc/system.h:29
func kinc_video_formats() []string {
	__ret := C.kinc_video_formats()
	__v := *(*[]*C.char)(unsafe.Pointer(__ret)) //packPCharString(__ret)
	val := []string{}
	for _, v := range __v {
		val = append(val, packPCharString(v))
	}
	return val
}

// kinc_language function as declared in kinc/system.h:31
func kinc_language() string {
	__ret := C.kinc_language()
	__v := packPCharString(__ret)
	return __v
}

// kinc_vibrate function as declared in kinc/system.h:33
func kinc_vibrate(milliseconds int32) {
	cmilliseconds, cmillisecondsAllocMap := (C.int)(milliseconds), cgoAllocsUnknown
	C.kinc_vibrate(cmilliseconds)
	runtime.KeepAlive(cmillisecondsAllocMap)
}

// kinc_safe_zone function as declared in kinc/system.h:35
func kinc_safe_zone() float32 {
	__ret := C.kinc_safe_zone()
	__v := (float32)(__ret)
	return __v
}

// kinc_automatic_safe_zone function as declared in kinc/system.h:36
func kinc_automatic_safe_zone() bool {
	__ret := C.kinc_automatic_safe_zone()
	__v := (bool)(__ret)
	return __v
}

// kinc_set_safe_zone function as declared in kinc/system.h:37
func kinc_set_safe_zone(value float32) {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kinc_set_safe_zone(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
}

// kinc_frequency function as declared in kinc/system.h:41
func kinc_frequency() float64 {
	__ret := C.kinc_frequency()
	__v := (float64)(__ret)
	return __v
}

// kinc_timestamp function as declared in kinc/system.h:42
func kinc_timestamp() kinc_ticks {
	__ret := C.kinc_timestamp()
	__v := (kinc_ticks)(__ret)
	return __v
}

// kinc_time function as declared in kinc/system.h:43
func kinc_time() float64 {
	__ret := C.kinc_time()
	__v := (float64)(__ret)
	return __v
}

// kinc_start function as declared in kinc/system.h:45
func kinc_start() {
	C.kinc_start()
}

// kinc_internal_frame function as declared in kinc/system.h:46
func kinc_internal_frame() bool {
	__ret := C.kinc_internal_frame()
	__v := (bool)(__ret)
	return __v
}

// kinc_stop function as declared in kinc/system.h:47
func kinc_stop() {
	C.kinc_stop()
}

// kinc_login function as declared in kinc/system.h:49
func kinc_login() {
	C.kinc_login()
}

// kinc_unlock_achievement function as declared in kinc/system.h:50
func kinc_unlock_achievement(id int32) {
	cid, cidAllocMap := (C.int)(id), cgoAllocsUnknown
	C.kinc_unlock_achievement(cid)
	runtime.KeepAlive(cidAllocMap)
}

// kinc_set_keep_screen_on function as declared in kinc/system.h:52
func kinc_set_keep_screen_on(on bool) {
	con, conAllocMap := (C._Bool)(on), cgoAllocsUnknown
	C.kinc_set_keep_screen_on(con)
	runtime.KeepAlive(conAllocMap)
}

var (
	UpdateCallback     func()
	ForegroundCallback func()
	ResumeCallback     func()
	PauseCallback      func()
	BackgroundCallback func()
	ShutdownCallback   func()
	LoginCallback      func()
	LogoutCallback     func()
)

//export GoUpdateCallback
func GoUpdateCallback() {
	if UpdateCallback != nil {
		UpdateCallback()
	}
}

//export GoForegroundCallback
func GoForegroundCallback() {
	if ForegroundCallback != nil {
		ForegroundCallback()
	}
}

//export GoBackgroundCallback
func GoBackgroundCallback() {
	if BackgroundCallback != nil {
		BackgroundCallback()
	}
}

//export GoResumeCallback
func GoResumeCallback() {
	if ResumeCallback != nil {
		ResumeCallback()
	}
}

//export GoPauseCallback
func GoPauseCallback() {
	if PauseCallback != nil {
		PauseCallback()
	}
}

//export GoShutdownCallback
func GoShutdownCallback() {
	if ShutdownCallback != nil {
		ShutdownCallback()
	}
}

//export GoLoginCallback
func GoLoginCallback() {
	if LoginCallback != nil {
		LoginCallback()
	}
}

//export GoLogoutCallback
func GoLogoutCallback() {
	if LogoutCallback != nil {
		LogoutCallback()
	}
}

// kinc_set_update_callback function as declared in kinc/system.h:54
func kinc_set_update_callback(value *func()) {
	UpdateCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.updateCallback)
	C.kinc_set_update_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_foreground_callback function as declared in kinc/system.h:55
func kinc_set_foreground_callback(value *func()) {
	ForegroundCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.foregroundCallback)
	C.kinc_set_foreground_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_resume_callback function as declared in kinc/system.h:56
func kinc_set_resume_callback(value *func()) {
	ResumeCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.resumeCallback)
	C.kinc_set_resume_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_pause_callback function as declared in kinc/system.h:57
func kinc_set_pause_callback(value *func()) {
	PauseCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.pauseCallback)
	C.kinc_set_pause_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_background_callback function as declared in kinc/system.h:58
func kinc_set_background_callback(value *func()) {
	BackgroundCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.backgroundCallback)
	C.kinc_set_background_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_shutdown_callback function as declared in kinc/system.h:59
func kinc_set_shutdown_callback(value *func()) {
	ShutdownCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.shutdownCallback)
	C.kinc_set_shutdown_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_drop_files_callback function as declared in kinc/system.h:60
func kinc_set_drop_files_callback(value *func(arg0 []int32)) {
	// cvalue, cvalueAllocMap := value.PassRef()
	// C.kinc_set_drop_files_callback(cvalue)
	// runtime.KeepAlive(cvalueAllocMap)
}

// kinc_set_cut_callback function as declared in kinc/system.h:61
func kinc_set_cut_callback(value *func() []byte) {
	// cvalue, cvalueAllocMap := value.PassRef()
	// C.kinc_set_cut_callback(cvalue)
	// runtime.KeepAlive(cvalueAllocMap)
}

// kinc_set_copy_callback function as declared in kinc/system.h:62
func kinc_set_copy_callback(value *func() []byte) {
	// cvalue, cvalueAllocMap := value.PassRef()
	// C.kinc_set_copy_callback(cvalue)
	// runtime.KeepAlive(cvalueAllocMap)
}

// kinc_set_paste_callback function as declared in kinc/system.h:63
func kinc_set_paste_callback(value *func(arg0 []byte)) {
	// cvalue, cvalueAllocMap := value.PassRef()
	// C.kinc_set_paste_callback(cvalue)
	// runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_login_callback function as declared in kinc/system.h:64
func kinc_set_login_callback(value *func()) {
	LoginCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.loginCallback)
	C.kinc_set_login_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_set_logout_callback function as declared in kinc/system.h:65
func kinc_set_logout_callback(value *func()) {
	LoginCallback = *value
	//cvalue, cvalueAllocMap := value.PassRef()
	cvalue := unsafe.Pointer(C.logoutCallback)
	C.kinc_set_logout_callback(cvalue)
	runtime.KeepAlive(cgoAllocsUnknown)
}

// kinc_internal_shutdown function as declared in kinc/system.h:67
func kinc_internal_shutdown() {
	C.kinc_internal_shutdown()
}

// kinc_internal_update_callback function as declared in kinc/system.h:68
func kinc_internal_update_callback() {
	C.kinc_internal_update_callback()
}

// kinc_internal_foreground_callback function as declared in kinc/system.h:69
func kinc_internal_foreground_callback() {
	C.kinc_internal_foreground_callback()
}

// kinc_internal_resume_callback function as declared in kinc/system.h:70
func kinc_internal_resume_callback() {
	C.kinc_internal_resume_callback()
}

// kinc_internal_pause_callback function as declared in kinc/system.h:71
func kinc_internal_pause_callback() {
	C.kinc_internal_pause_callback()
}

// kinc_internal_background_callback function as declared in kinc/system.h:72
func kinc_internal_background_callback() {
	C.kinc_internal_background_callback()
}

// kinc_internal_shutdown_callback function as declared in kinc/system.h:73
func kinc_internal_shutdown_callback() {
	C.kinc_internal_shutdown_callback()
}

// kinc_internal_drop_files_callback function as declared in kinc/system.h:74
func kinc_internal_drop_files_callback(arg0 []int32) {
	carg0, carg0AllocMap := copyPWcharBytes((*sliceHeader)(unsafe.Pointer(&arg0)))
	C.kinc_internal_drop_files_callback(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// kinc_internal_cut_callback function as declared in kinc/system.h:75
func kinc_internal_cut_callback() *byte {
	__ret := C.kinc_internal_cut_callback()
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// kinc_internal_copy_callback function as declared in kinc/system.h:76
func kinc_internal_copy_callback() *byte {
	__ret := C.kinc_internal_copy_callback()
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// kinc_internal_paste_callback function as declared in kinc/system.h:77
func kinc_internal_paste_callback(arg0 []byte) {
	carg0, carg0AllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&arg0)))
	C.kinc_internal_paste_callback(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// kinc_internal_login_callback function as declared in kinc/system.h:78
func kinc_internal_login_callback() {
	C.kinc_internal_login_callback()
}

// kinc_internal_logout_callback function as declared in kinc/system.h:79
func kinc_internal_logout_callback() {
	C.kinc_internal_logout_callback()
}

// kinc_window_create function as declared in kinc/window.h:44
func kinc_window_create(win *kinc_window_options, frame *kinc_framebuffer_options) int32 {
	cwin, cwinAllocMap := win.PassRef()
	cframe, cframeAllocMap := frame.PassRef()
	__ret := C.kinc_window_create(cwin, cframe)
	runtime.KeepAlive(cframeAllocMap)
	runtime.KeepAlive(cwinAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_window_destroy function as declared in kinc/window.h:45
func kinc_window_destroy(window_index int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	C.kinc_window_destroy(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_count_windows function as declared in kinc/window.h:46
func kinc_count_windows() int32 {
	__ret := C.kinc_count_windows()
	__v := (int32)(__ret)
	return __v
}

// kinc_window_resize function as declared in kinc/window.h:47
func kinc_window_resize(window_index int32, width int32, height int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	C.kinc_window_resize(cwindow_index, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_move function as declared in kinc/window.h:48
func kinc_window_move(window_index int32, x int32, y int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_window_move(cwindow_index, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_change_mode function as declared in kinc/window.h:49
func kinc_window_change_mode(window_index int32, mode kinc_window_mode) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.kinc_window_mode_t)(mode), cgoAllocsUnknown
	C.kinc_window_change_mode(cwindow_index, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_change_features function as declared in kinc/window.h:50
func kinc_window_change_features(window_index int32, features int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cfeatures, cfeaturesAllocMap := (C.int)(features), cgoAllocsUnknown
	C.kinc_window_change_features(cwindow_index, cfeatures)
	runtime.KeepAlive(cfeaturesAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_change_framebuffer function as declared in kinc/window.h:51
func kinc_window_change_framebuffer(window_index int32, frame *kinc_framebuffer_options) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cframe, cframeAllocMap := frame.PassRef()
	C.kinc_window_change_framebuffer(cwindow_index, cframe)
	runtime.KeepAlive(cframeAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_x function as declared in kinc/window.h:52
func kinc_window_x(window_index int32) int32 {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_x(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_window_y function as declared in kinc/window.h:53
func kinc_window_y(window_index int32) int32 {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_y(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_window_width function as declared in kinc/window.h:54
func kinc_window_width(window_index int32) int32 {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_width(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_window_height function as declared in kinc/window.h:55
func kinc_window_height(window_index int32) int32 {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_height(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_window_display function as declared in kinc/window.h:56
func kinc_window_display(window_index int32) int32 {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_display(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_window_get_mode function as declared in kinc/window.h:57
func kinc_window_get_mode(window_index int32) kinc_window_mode {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_get_mode(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (kinc_window_mode)(__ret)
	return __v
}

// kinc_window_show function as declared in kinc/window.h:58
func kinc_window_show(window_index int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	C.kinc_window_show(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_hide function as declared in kinc/window.h:59
func kinc_window_hide(window_index int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	C.kinc_window_hide(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_set_title function as declared in kinc/window.h:60
func kinc_window_set_title(window_index int32, title string) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	ctitle, ctitleAllocMap := unpackPCharString(title)
	C.kinc_window_set_title(cwindow_index, ctitle)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_set_resize_callback function as declared in kinc/window.h:61
func kinc_window_set_resize_callback(window_index int32, callback *func(x int32, y int32, data unsafe.Pointer), data unsafe.Pointer) {
	// cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	// ccallback, ccallbackAllocMap := callback.PassRef()
	// cdata, cdataAllocMap := data, cgoAllocsUnknown
	// C.kinc_window_set_resize_callback(cwindow_index, ccallback, cdata)
	// runtime.KeepAlive(cdataAllocMap)
	// runtime.KeepAlive(ccallbackAllocMap)
	// runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_set_ppi_changed_callback function as declared in kinc/window.h:62
func kinc_window_set_ppi_changed_callback(window_index int32, callback *func(ppi int32, data unsafe.Pointer), data unsafe.Pointer) {
	// cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	// ccallback, ccallbackAllocMap := callback.PassRef()
	// cdata, cdataAllocMap := data, cgoAllocsUnknown
	// C.kinc_window_set_ppi_changed_callback(cwindow_index, ccallback, cdata)
	// runtime.KeepAlive(cdataAllocMap)
	// runtime.KeepAlive(ccallbackAllocMap)
	// runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_window_vsynced function as declared in kinc/window.h:63
func kinc_window_vsynced(window_index int32) bool {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	__ret := C.kinc_window_vsynced(cwindow_index)
	runtime.KeepAlive(cwindow_indexAllocMap)
	__v := (bool)(__ret)
	return __v
}

// kinc_internal_init_window_options function as declared in kinc/window.h:65
func kinc_internal_init_window_options(win *kinc_window_options) {
	cwin, cwinAllocMap := win.PassRef()
	C.kinc_internal_init_window_options(cwin)
	runtime.KeepAlive(cwinAllocMap)
}

// kinc_internal_init_framebuffer_options function as declared in kinc/window.h:66
func kinc_internal_init_framebuffer_options(frame *kinc_framebuffer_options) {
	cframe, cframeAllocMap := frame.PassRef()
	C.kinc_internal_init_framebuffer_options(cframe)
	runtime.KeepAlive(cframeAllocMap)
}

// kinc_internal_call_resize_callback function as declared in kinc/window.h:67
func kinc_internal_call_resize_callback(window_index int32, width int32, height int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	C.kinc_internal_call_resize_callback(cwindow_index, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_internal_call_ppi_changed_callback function as declared in kinc/window.h:68
func kinc_internal_call_ppi_changed_callback(window_index int32, ppi int32) {
	cwindow_index, cwindow_indexAllocMap := (C.int)(window_index), cgoAllocsUnknown
	cppi, cppiAllocMap := (C.int)(ppi), cgoAllocsUnknown
	C.kinc_internal_call_ppi_changed_callback(cwindow_index, cppi)
	runtime.KeepAlive(cppiAllocMap)
	runtime.KeepAlive(cwindow_indexAllocMap)
}

// kinc_image_init function as declared in kinc/image.h:38
func kinc_image_init(image *kinc_image, memory unsafe.Pointer, width int32, height int32, format kinc_image_format) uint {
	cimage, cimageAllocMap := image.PassRef()
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	__ret := C.kinc_image_init(cimage, cmemory, cwidth, cheight, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	__v := (uint)(__ret)
	return __v
}

// kinc_image_init3d function as declared in kinc/image.h:39
func kinc_image_init3d(image *kinc_image, memory unsafe.Pointer, width int32, height int32, depth int32, format kinc_image_format) uint {
	cimage, cimageAllocMap := image.PassRef()
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cdepth, cdepthAllocMap := (C.int)(depth), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	__ret := C.kinc_image_init3d(cimage, cmemory, cwidth, cheight, cdepth, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cdepthAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	__v := (uint)(__ret)
	return __v
}

// kinc_image_init_from_file function as declared in kinc/image.h:40
func kinc_image_init_from_file(image *kinc_image, memory unsafe.Pointer, filename string) uint {
	cimage, cimageAllocMap := image.PassRef()
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	cfilename, cfilenameAllocMap := unpackPCharString(filename)
	__ret := C.kinc_image_init_from_file(cimage, cmemory, cfilename)
	runtime.KeepAlive(cfilenameAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	__v := (uint)(__ret)
	return __v
}

// kinc_image_init_from_bytes function as declared in kinc/image.h:41
func kinc_image_init_from_bytes(image *kinc_image, data unsafe.Pointer, width int32, height int32, format kinc_image_format) {
	cimage, cimageAllocMap := image.PassRef()
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	C.kinc_image_init_from_bytes(cimage, cdata, cwidth, cheight, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cimageAllocMap)
}

// kinc_image_init_from_bytes3d function as declared in kinc/image.h:42
func kinc_image_init_from_bytes3d(image *kinc_image, data unsafe.Pointer, width int32, height int32, depth int32, format kinc_image_format) {
	cimage, cimageAllocMap := image.PassRef()
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cdepth, cdepthAllocMap := (C.int)(depth), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	C.kinc_image_init_from_bytes3d(cimage, cdata, cwidth, cheight, cdepth, cformat)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cdepthAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cimageAllocMap)
}

// kinc_image_destroy function as declared in kinc/image.h:43
func kinc_image_destroy(image *kinc_image) {
	cimage, cimageAllocMap := image.PassRef()
	C.kinc_image_destroy(cimage)
	runtime.KeepAlive(cimageAllocMap)
}

// kinc_image_at function as declared in kinc/image.h:44
func kinc_image_at(image *kinc_image, x int32, y int32) int32 {
	cimage, cimageAllocMap := image.PassRef()
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	__ret := C.kinc_image_at(cimage, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cimageAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_image_get_pixels function as declared in kinc/image.h:45
func kinc_image_get_pixels(image *kinc_image) *byte {
	cimage, cimageAllocMap := image.PassRef()
	__ret := C.kinc_image_get_pixels(cimage)
	runtime.KeepAlive(cimageAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// kinc_image_format_sizeof function as declared in kinc/image.h:47
func kinc_image_format_sizeof(format kinc_image_format) int32 {
	cformat, cformatAllocMap := (C.kinc_image_format_t)(format), cgoAllocsUnknown
	__ret := C.kinc_image_format_sizeof(cformat)
	runtime.KeepAlive(cformatAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_g4_init function as declared in graphics4/graphics.h:53
func kinc_g4_init(window int32, depthbufferbits int32, stencilbufferbits int32, vsync bool) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cdepthbufferbits, cdepthbufferbitsAllocMap := (C.int)(depthbufferbits), cgoAllocsUnknown
	cstencilbufferbits, cstencilbufferbitsAllocMap := (C.int)(stencilbufferbits), cgoAllocsUnknown
	cvsync, cvsyncAllocMap := (C._Bool)(vsync), cgoAllocsUnknown
	C.kinc_g4_init(cwindow, cdepthbufferbits, cstencilbufferbits, cvsync)
	runtime.KeepAlive(cvsyncAllocMap)
	runtime.KeepAlive(cstencilbufferbitsAllocMap)
	runtime.KeepAlive(cdepthbufferbitsAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_g4_destroy function as declared in graphics4/graphics.h:55
func kinc_g4_destroy(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_g4_destroy(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_g4_flush function as declared in graphics4/graphics.h:57
func kinc_g4_flush() {
	C.kinc_g4_flush()
}

// kinc_g4_begin function as declared in graphics4/graphics.h:59
func kinc_g4_begin(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_g4_begin(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_g4_end function as declared in graphics4/graphics.h:61
func kinc_g4_end(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_g4_end(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_g4_swap_buffers function as declared in graphics4/graphics.h:63
func kinc_g4_swap_buffers() bool {
	__ret := C.kinc_g4_swap_buffers()
	__v := (bool)(__ret)
	return __v
}

// kinc_g4_clear function as declared in graphics4/graphics.h:69
func kinc_g4_clear(flags uint32, color uint32, depth float32, stencil int32) {
	cflags, cflagsAllocMap := (C.uint)(flags), cgoAllocsUnknown
	ccolor, ccolorAllocMap := (C.uint)(color), cgoAllocsUnknown
	cdepth, cdepthAllocMap := (C.float)(depth), cgoAllocsUnknown
	cstencil, cstencilAllocMap := (C.int)(stencil), cgoAllocsUnknown
	C.kinc_g4_clear(cflags, ccolor, cdepth, cstencil)
	runtime.KeepAlive(cstencilAllocMap)
	runtime.KeepAlive(cdepthAllocMap)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
}

// kinc_g4_viewport function as declared in graphics4/graphics.h:71
func kinc_g4_viewport(x int32, y int32, width int32, height int32) {
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	C.kinc_g4_viewport(cx, cy, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
}

// kinc_g4_scissor function as declared in graphics4/graphics.h:73
func kinc_g4_scissor(x int32, y int32, width int32, height int32) {
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	C.kinc_g4_scissor(cx, cy, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
}

// kinc_g4_disable_scissor function as declared in graphics4/graphics.h:75
func kinc_g4_disable_scissor() {
	C.kinc_g4_disable_scissor()
}

// kinc_g4_draw_indexed_vertices function as declared in graphics4/graphics.h:77
func kinc_g4_draw_indexed_vertices() {
	C.kinc_g4_draw_indexed_vertices()
}

// kinc_g4_draw_indexed_vertices_from_to function as declared in graphics4/graphics.h:79
func kinc_g4_draw_indexed_vertices_from_to(start int32, count int32) {
	cstart, cstartAllocMap := (C.int)(start), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_draw_indexed_vertices_from_to(cstart, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cstartAllocMap)
}

// kinc_g4_draw_indexed_vertices_instanced function as declared in graphics4/graphics.h:81
func kinc_g4_draw_indexed_vertices_instanced(instancecount int32) {
	cinstancecount, cinstancecountAllocMap := (C.int)(instancecount), cgoAllocsUnknown
	C.kinc_g4_draw_indexed_vertices_instanced(cinstancecount)
	runtime.KeepAlive(cinstancecountAllocMap)
}

// kinc_g4_draw_indexed_vertices_instanced_from_to function as declared in graphics4/graphics.h:83
func kinc_g4_draw_indexed_vertices_instanced_from_to(instancecount int32, start int32, count int32) {
	cinstancecount, cinstancecountAllocMap := (C.int)(instancecount), cgoAllocsUnknown
	cstart, cstartAllocMap := (C.int)(start), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_draw_indexed_vertices_instanced_from_to(cinstancecount, cstart, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cinstancecountAllocMap)
}

// kinc_g4_set_texture_addressing function as declared in graphics4/graphics.h:85
func kinc_g4_set_texture_addressing(unit kinc_g4_texture_unit, dir kinc_g4_texture_direction, addressing kinc_g4_texture_addressing) {
	cunit, cunitAllocMap := unit.PassValue()
	cdir, cdirAllocMap := (C.kinc_g4_texture_direction_t)(dir), cgoAllocsUnknown
	caddressing, caddressingAllocMap := (C.kinc_g4_texture_addressing_t)(addressing), cgoAllocsUnknown
	C.kinc_g4_set_texture_addressing(cunit, cdir, caddressing)
	runtime.KeepAlive(caddressingAllocMap)
	runtime.KeepAlive(cdirAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_texture3d_addressing function as declared in graphics4/graphics.h:87
func kinc_g4_set_texture3d_addressing(unit kinc_g4_texture_unit, dir kinc_g4_texture_direction, addressing kinc_g4_texture_addressing) {
	cunit, cunitAllocMap := unit.PassValue()
	cdir, cdirAllocMap := (C.kinc_g4_texture_direction_t)(dir), cgoAllocsUnknown
	caddressing, caddressingAllocMap := (C.kinc_g4_texture_addressing_t)(addressing), cgoAllocsUnknown
	C.kinc_g4_set_texture3d_addressing(cunit, cdir, caddressing)
	runtime.KeepAlive(caddressingAllocMap)
	runtime.KeepAlive(cdirAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_pipeline function as declared in graphics4/graphics.h:89
func kinc_g4_set_pipeline(pipeline *kinc_g4_pipeline) {
	cpipeline, cpipelineAllocMap := pipeline.PassRef()
	C.kinc_g4_set_pipeline(cpipeline)
	runtime.KeepAlive(cpipelineAllocMap)
}

// kinc_g4_set_stencil_reference_value function as declared in graphics4/graphics.h:91
func kinc_g4_set_stencil_reference_value(value int32) {
	cvalue, cvalueAllocMap := (C.int)(value), cgoAllocsUnknown
	C.kinc_g4_set_stencil_reference_value(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
}

// kinc_g4_set_texture_operation function as declared in graphics4/graphics.h:93
func kinc_g4_set_texture_operation(operation kinc_g4_texture_operation, arg1 kinc_g4_texture_argument, arg2 kinc_g4_texture_argument) {
	coperation, coperationAllocMap := (C.kinc_g4_texture_operation_t)(operation), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.kinc_g4_texture_argument_t)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.kinc_g4_texture_argument_t)(arg2), cgoAllocsUnknown
	C.kinc_g4_set_texture_operation(coperation, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(coperationAllocMap)
}

// kinc_g4_set_int function as declared in graphics4/graphics.h:95
func kinc_g4_set_int(location kinc_g4_constant_location, value int32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := (C.int)(value), cgoAllocsUnknown
	C.kinc_g4_set_int(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_float function as declared in graphics4/graphics.h:96
func kinc_g4_set_float(location kinc_g4_constant_location, value float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kinc_g4_set_float(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_float2 function as declared in graphics4/graphics.h:97
func kinc_g4_set_float2(location kinc_g4_constant_location, value1 float32, value2 float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue1, cvalue1AllocMap := (C.float)(value1), cgoAllocsUnknown
	cvalue2, cvalue2AllocMap := (C.float)(value2), cgoAllocsUnknown
	C.kinc_g4_set_float2(clocation, cvalue1, cvalue2)
	runtime.KeepAlive(cvalue2AllocMap)
	runtime.KeepAlive(cvalue1AllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_float3 function as declared in graphics4/graphics.h:98
func kinc_g4_set_float3(location kinc_g4_constant_location, value1 float32, value2 float32, value3 float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue1, cvalue1AllocMap := (C.float)(value1), cgoAllocsUnknown
	cvalue2, cvalue2AllocMap := (C.float)(value2), cgoAllocsUnknown
	cvalue3, cvalue3AllocMap := (C.float)(value3), cgoAllocsUnknown
	C.kinc_g4_set_float3(clocation, cvalue1, cvalue2, cvalue3)
	runtime.KeepAlive(cvalue3AllocMap)
	runtime.KeepAlive(cvalue2AllocMap)
	runtime.KeepAlive(cvalue1AllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_float4 function as declared in graphics4/graphics.h:99
func kinc_g4_set_float4(location kinc_g4_constant_location, value1 float32, value2 float32, value3 float32, value4 float32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue1, cvalue1AllocMap := (C.float)(value1), cgoAllocsUnknown
	cvalue2, cvalue2AllocMap := (C.float)(value2), cgoAllocsUnknown
	cvalue3, cvalue3AllocMap := (C.float)(value3), cgoAllocsUnknown
	cvalue4, cvalue4AllocMap := (C.float)(value4), cgoAllocsUnknown
	C.kinc_g4_set_float4(clocation, cvalue1, cvalue2, cvalue3, cvalue4)
	runtime.KeepAlive(cvalue4AllocMap)
	runtime.KeepAlive(cvalue3AllocMap)
	runtime.KeepAlive(cvalue2AllocMap)
	runtime.KeepAlive(cvalue1AllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_floats function as declared in graphics4/graphics.h:100
func kinc_g4_set_floats(location kinc_g4_constant_location, values []float32, count int32) {
	clocation, clocationAllocMap := location.PassValue()
	cvalues, cvaluesAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&values)))
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_set_floats(clocation, cvalues, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cvaluesAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_bool function as declared in graphics4/graphics.h:101
func kinc_g4_set_bool(location kinc_g4_constant_location, value bool) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := (C._Bool)(value), cgoAllocsUnknown
	C.kinc_g4_set_bool(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_matrix3 function as declared in graphics4/graphics.h:102
func kinc_g4_set_matrix3(location kinc_g4_constant_location, value *kinc_matrix3x3) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := value.PassRef()
	C.kinc_g4_set_matrix3(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_matrix4 function as declared in graphics4/graphics.h:103
func kinc_g4_set_matrix4(location kinc_g4_constant_location, value *kinc_matrix4x4) {
	clocation, clocationAllocMap := location.PassValue()
	cvalue, cvalueAllocMap := value.PassRef()
	C.kinc_g4_set_matrix4(clocation, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(clocationAllocMap)
}

// kinc_g4_set_texture_magnification_filter function as declared in graphics4/graphics.h:105
func kinc_g4_set_texture_magnification_filter(unit kinc_g4_texture_unit, filter kinc_g4_texture_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_g4_set_texture_magnification_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_texture3d_magnification_filter function as declared in graphics4/graphics.h:107
func kinc_g4_set_texture3d_magnification_filter(texunit kinc_g4_texture_unit, filter kinc_g4_texture_filter) {
	ctexunit, ctexunitAllocMap := texunit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_g4_set_texture3d_magnification_filter(ctexunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(ctexunitAllocMap)
}

// kinc_g4_set_texture_minification_filter function as declared in graphics4/graphics.h:109
func kinc_g4_set_texture_minification_filter(unit kinc_g4_texture_unit, filter kinc_g4_texture_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_g4_set_texture_minification_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_texture3d_minification_filter function as declared in graphics4/graphics.h:111
func kinc_g4_set_texture3d_minification_filter(texunit kinc_g4_texture_unit, filter kinc_g4_texture_filter) {
	ctexunit, ctexunitAllocMap := texunit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_texture_filter_t)(filter), cgoAllocsUnknown
	C.kinc_g4_set_texture3d_minification_filter(ctexunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(ctexunitAllocMap)
}

// kinc_g4_set_texture_mipmap_filter function as declared in graphics4/graphics.h:113
func kinc_g4_set_texture_mipmap_filter(unit kinc_g4_texture_unit, filter kinc_g4_mipmap_filter) {
	cunit, cunitAllocMap := unit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_mipmap_filter_t)(filter), cgoAllocsUnknown
	C.kinc_g4_set_texture_mipmap_filter(cunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_texture3d_mipmap_filter function as declared in graphics4/graphics.h:115
func kinc_g4_set_texture3d_mipmap_filter(texunit kinc_g4_texture_unit, filter kinc_g4_mipmap_filter) {
	ctexunit, ctexunitAllocMap := texunit.PassValue()
	cfilter, cfilterAllocMap := (C.kinc_g4_mipmap_filter_t)(filter), cgoAllocsUnknown
	C.kinc_g4_set_texture3d_mipmap_filter(ctexunit, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(ctexunitAllocMap)
}

// kinc_g4_set_texture_compare_mode function as declared in graphics4/graphics.h:117
func kinc_g4_set_texture_compare_mode(unit kinc_g4_texture_unit, enabled bool) {
	cunit, cunitAllocMap := unit.PassValue()
	cenabled, cenabledAllocMap := (C._Bool)(enabled), cgoAllocsUnknown
	C.kinc_g4_set_texture_compare_mode(cunit, cenabled)
	runtime.KeepAlive(cenabledAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_cubemap_compare_mode function as declared in graphics4/graphics.h:119
func kinc_g4_set_cubemap_compare_mode(unit kinc_g4_texture_unit, enabled bool) {
	cunit, cunitAllocMap := unit.PassValue()
	cenabled, cenabledAllocMap := (C._Bool)(enabled), cgoAllocsUnknown
	C.kinc_g4_set_cubemap_compare_mode(cunit, cenabled)
	runtime.KeepAlive(cenabledAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_render_targets_inverted_y function as declared in graphics4/graphics.h:121
func kinc_g4_render_targets_inverted_y() bool {
	__ret := C.kinc_g4_render_targets_inverted_y()
	__v := (bool)(__ret)
	return __v
}

// kinc_g4_non_pow2_textures_supported function as declared in graphics4/graphics.h:123
func kinc_g4_non_pow2_textures_supported() bool {
	__ret := C.kinc_g4_non_pow2_textures_supported()
	__v := (bool)(__ret)
	return __v
}

// kinc_g4_restore_render_target function as declared in graphics4/graphics.h:125
func kinc_g4_restore_render_target() {
	C.kinc_g4_restore_render_target()
}

// kinc_g4_set_render_targets function as declared in graphics4/graphics.h:127
func kinc_g4_set_render_targets(targets []*kinc_g4_render_target, count int32) {
	ctargets, ctargetsAllocMap := unpackArgSPKinc_g4_render_target(targets)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_set_render_targets(ctargets, ccount)
	runtime.KeepAlive(ccountAllocMap)
	packSPKinc_g4_render_target(targets, ctargets)
	runtime.KeepAlive(ctargetsAllocMap)
}

// kinc_g4_set_render_target_face function as declared in graphics4/graphics.h:129
func kinc_g4_set_render_target_face(texture *kinc_g4_render_target, face int32) {
	ctexture, ctextureAllocMap := texture.PassRef()
	cface, cfaceAllocMap := (C.int)(face), cgoAllocsUnknown
	C.kinc_g4_set_render_target_face(ctexture, cface)
	runtime.KeepAlive(cfaceAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
}

// kinc_g4_set_texture function as declared in graphics4/graphics.h:131
func kinc_g4_set_texture(unit kinc_g4_texture_unit, texture *kinc_g4_texture) {
	cunit, cunitAllocMap := unit.PassValue()
	ctexture, ctextureAllocMap := texture.PassRef()
	C.kinc_g4_set_texture(cunit, ctexture)
	runtime.KeepAlive(ctextureAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_set_image_texture function as declared in graphics4/graphics.h:133
func kinc_g4_set_image_texture(unit kinc_g4_texture_unit, texture *kinc_g4_texture) {
	cunit, cunitAllocMap := unit.PassValue()
	ctexture, ctextureAllocMap := texture.PassRef()
	C.kinc_g4_set_image_texture(cunit, ctexture)
	runtime.KeepAlive(ctextureAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_init_occlusion_query function as declared in graphics4/graphics.h:135
func kinc_g4_init_occlusion_query(occlusionquery []uint32) bool {
	cocclusionquery, cocclusionqueryAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&occlusionquery)))
	__ret := C.kinc_g4_init_occlusion_query(cocclusionquery)
	runtime.KeepAlive(cocclusionqueryAllocMap)
	__v := (bool)(__ret)
	return __v
}

// kinc_g4_delete_occlusion_query function as declared in graphics4/graphics.h:137
func kinc_g4_delete_occlusion_query(occlusionquery uint32) {
	cocclusionquery, cocclusionqueryAllocMap := (C.uint)(occlusionquery), cgoAllocsUnknown
	C.kinc_g4_delete_occlusion_query(cocclusionquery)
	runtime.KeepAlive(cocclusionqueryAllocMap)
}

// kinc_g4_start_occlusion_query function as declared in graphics4/graphics.h:139
func kinc_g4_start_occlusion_query(occlusionquery uint32) {
	cocclusionquery, cocclusionqueryAllocMap := (C.uint)(occlusionquery), cgoAllocsUnknown
	C.kinc_g4_start_occlusion_query(cocclusionquery)
	runtime.KeepAlive(cocclusionqueryAllocMap)
}

// kinc_g4_end_occlusion_query function as declared in graphics4/graphics.h:141
func kinc_g4_end_occlusion_query(occlusionquery uint32) {
	cocclusionquery, cocclusionqueryAllocMap := (C.uint)(occlusionquery), cgoAllocsUnknown
	C.kinc_g4_end_occlusion_query(cocclusionquery)
	runtime.KeepAlive(cocclusionqueryAllocMap)
}

// kinc_g4_are_query_results_available function as declared in graphics4/graphics.h:143
func kinc_g4_are_query_results_available(occlusionquery uint32) bool {
	cocclusionquery, cocclusionqueryAllocMap := (C.uint)(occlusionquery), cgoAllocsUnknown
	__ret := C.kinc_g4_are_query_results_available(cocclusionquery)
	runtime.KeepAlive(cocclusionqueryAllocMap)
	__v := (bool)(__ret)
	return __v
}

// kinc_g4_get_query_results function as declared in graphics4/graphics.h:145
func kinc_g4_get_query_results(occlusionquery uint32, pixelcount *uint32) {
	cocclusionquery, cocclusionqueryAllocMap := (C.uint)(occlusionquery), cgoAllocsUnknown
	cpixelcount, cpixelcountAllocMap := (*C.uint)(unsafe.Pointer(pixelcount)), cgoAllocsUnknown //copyPUintBytes((*sliceHeader)(unsafe.Pointer(&pixelcount)))
	C.kinc_g4_get_query_results(cocclusionquery, cpixelcount)
	_pcount := (*C.uint)(unsafe.Pointer(cpixelcount))
	_count := uint32(*_pcount)
	pixelcount = &_count

	runtime.KeepAlive(cpixelcountAllocMap)
	runtime.KeepAlive(cocclusionqueryAllocMap)
}

// kinc_g4_set_texture_array function as declared in graphics4/graphics.h:147
func kinc_g4_set_texture_array(unit kinc_g4_texture_unit, array *kinc_g4_texture_array) {
	cunit, cunitAllocMap := unit.PassValue()
	carray, carrayAllocMap := array.PassRef()
	C.kinc_g4_set_texture_array(cunit, carray)
	runtime.KeepAlive(carrayAllocMap)
	runtime.KeepAlive(cunitAllocMap)
}

// kinc_g4_antialiasing_samples function as declared in graphics4/graphics.h:149
func kinc_g4_antialiasing_samples() int32 {
	__ret := C.kinc_g4_antialiasing_samples()
	__v := (int32)(__ret)
	return __v
}

// kinc_g4_set_antialiasing_samples function as declared in graphics4/graphics.h:151
func kinc_g4_set_antialiasing_samples(samples int32) {
	csamples, csamplesAllocMap := (C.int)(samples), cgoAllocsUnknown
	C.kinc_g4_set_antialiasing_samples(csamples)
	runtime.KeepAlive(csamplesAllocMap)
}

// kinc_matrix3x3_get function as declared in math/matrix.h:11
func kinc_matrix3x3_get(matrix *kinc_matrix3x3, x int32, y int32) float32 {
	cmatrix, cmatrixAllocMap := matrix.PassRef()
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	__ret := C.kinc_matrix3x3_get(cmatrix, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_matrix3x3_set function as declared in math/matrix.h:12
func kinc_matrix3x3_set(matrix *kinc_matrix3x3, x int32, y int32, value float32) {
	cmatrix, cmatrixAllocMap := matrix.PassRef()
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kinc_matrix3x3_set(cmatrix, cx, cy, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// kinc_matrix3x3_transpose function as declared in math/matrix.h:13
func kinc_matrix3x3_transpose(matrix *kinc_matrix3x3) {
	cmatrix, cmatrixAllocMap := matrix.PassRef()
	C.kinc_matrix3x3_transpose(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// kinc_matrix3x3_identity function as declared in math/matrix.h:14
func kinc_matrix3x3_identity() kinc_matrix3x3 {
	__ret := C.kinc_matrix3x3_identity()
	__v := *Newkinc_matrix3x3Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_matrix3x_rotation_x function as declared in math/matrix.h:15
func kinc_matrix3x_rotation_x(alpha float32) kinc_matrix3x3 {
	calpha, calphaAllocMap := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.kinc_matrix3x_rotation_x(calpha)
	runtime.KeepAlive(calphaAllocMap)
	__v := *Newkinc_matrix3x3Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_matrix3x_rotation_y function as declared in math/matrix.h:16
func kinc_matrix3x_rotation_y(alpha float32) kinc_matrix3x3 {
	calpha, calphaAllocMap := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.kinc_matrix3x_rotation_y(calpha)
	runtime.KeepAlive(calphaAllocMap)
	__v := *Newkinc_matrix3x3Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_matrix3x_rotation_z function as declared in math/matrix.h:17
func kinc_matrix3x_rotation_z(alpha float32) kinc_matrix3x3 {
	calpha, calphaAllocMap := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.kinc_matrix3x_rotation_z(calpha)
	runtime.KeepAlive(calphaAllocMap)
	__v := *Newkinc_matrix3x3Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_matrix4x4_get function as declared in math/matrix.h:23
func kinc_matrix4x4_get(matrix *kinc_matrix4x4, x int32, y int32) float32 {
	cmatrix, cmatrixAllocMap := matrix.PassRef()
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	__ret := C.kinc_matrix4x4_get(cmatrix, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_matrix4x4_transpose function as declared in math/matrix.h:24
func kinc_matrix4x4_transpose(matrix *kinc_matrix4x4) {
	cmatrix, cmatrixAllocMap := matrix.PassRef()
	C.kinc_matrix4x4_transpose(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// kinc_g4_index_buffer_init function as declared in graphics4/indexbuffer.h:13
func kinc_g4_index_buffer_init(buffer *kinc_g4_index_buffer, count int32) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	C.kinc_g4_index_buffer_init(cbuffer, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_index_buffer_destroy function as declared in graphics4/indexbuffer.h:14
func kinc_g4_index_buffer_destroy(buffer *kinc_g4_index_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_index_buffer_destroy(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_index_buffer_lock function as declared in graphics4/indexbuffer.h:15
func kinc_g4_index_buffer_lock(buffer *kinc_g4_index_buffer, indices []int32) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_index_buffer_lock(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	// __v := *(*[]int32)(unsafe.Pointer(&__ret))
	// return __v
	buffer.impl.data = indices
	buffer.impl.ref57aa69c7.data = unsafe.Pointer(&indices)
}

// kinc_g4_index_buffer_unlock function as declared in graphics4/indexbuffer.h:16
func kinc_g4_index_buffer_unlock(buffer *kinc_g4_index_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_index_buffer_unlock(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_index_buffer_count function as declared in graphics4/indexbuffer.h:17
func kinc_g4_index_buffer_count(buffer *kinc_g4_index_buffer) int32 {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	__ret := C.kinc_g4_index_buffer_count(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_internal_g4_index_buffer_set function as declared in graphics4/indexbuffer.h:19
func kinc_internal_g4_index_buffer_set(buffer *kinc_g4_index_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_internal_g4_index_buffer_set(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_set_index_buffer function as declared in graphics4/indexbuffer.h:21
func kinc_g4_set_index_buffer(buffer *kinc_g4_index_buffer) {
	cbuffer, cbufferAllocMap := buffer.PassRef()
	C.kinc_g4_set_index_buffer(cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
}

// kinc_g4_pipeline_init function as declared in graphics4/pipeline.h:95
func kinc_g4_pipeline_init(state *kinc_g4_pipeline) {
	cstate, cstateAllocMap := state.PassRef()
	C.kinc_g4_pipeline_init(cstate)
	runtime.KeepAlive(cstateAllocMap)
}

// kinc_g4_pipeline_destroy function as declared in graphics4/pipeline.h:96
func kinc_g4_pipeline_destroy(state *kinc_g4_pipeline) {
	cstate, cstateAllocMap := state.PassRef()
	C.kinc_g4_pipeline_destroy(cstate)
	runtime.KeepAlive(cstateAllocMap)
}

// kinc_g4_pipeline_compile function as declared in graphics4/pipeline.h:97
func kinc_g4_pipeline_compile(state *kinc_g4_pipeline) {
	cstate, cstateAllocMap := state.PassRef()
	C.kinc_g4_pipeline_compile(cstate)
	runtime.KeepAlive(cstateAllocMap)
}

// kinc_g4_pipeline_get_constant_location function as declared in graphics4/pipeline.h:98
func kinc_g4_pipeline_get_constant_location(state *kinc_g4_pipeline, name string) kinc_g4_constant_location {
	cstate, cstateAllocMap := state.PassRef()
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.kinc_g4_pipeline_get_constant_location(cstate, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cstateAllocMap)
	__v := *Newkinc_g4_constant_locationRef(unsafe.Pointer(&__ret))
	return __v
}

// kinc_g4_pipeline_get_texture_unit function as declared in graphics4/pipeline.h:99
func kinc_g4_pipeline_get_texture_unit(state *kinc_g4_pipeline, name string) kinc_g4_texture_unit {
	cstate, cstateAllocMap := state.PassRef()
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.kinc_g4_pipeline_get_texture_unit(cstate, cname)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cstateAllocMap)
	__v := *Newkinc_g4_texture_unitRef(unsafe.Pointer(&__ret))
	return __v
}

// kinc_g4_internal_set_pipeline function as declared in graphics4/pipeline.h:101
func kinc_g4_internal_set_pipeline(pipeline *kinc_g4_pipeline) {
	cpipeline, cpipelineAllocMap := pipeline.PassRef()
	C.kinc_g4_internal_set_pipeline(cpipeline)
	runtime.KeepAlive(cpipelineAllocMap)
}

// kinc_g4_internal_pipeline_set_defaults function as declared in graphics4/pipeline.h:102
func kinc_g4_internal_pipeline_set_defaults(pipeline *kinc_g4_pipeline) {
	cpipeline, cpipelineAllocMap := pipeline.PassRef()
	C.kinc_g4_internal_pipeline_set_defaults(cpipeline)
	runtime.KeepAlive(cpipelineAllocMap)
}

// kinc_g4_render_target_init function as declared in graphics4/rendertarget.h:35
func kinc_g4_render_target_init(rendertarget *kinc_g4_render_target, width int32, height int32, depthbufferbits int32, antialiasing bool, format kinc_g4_render_target_format, stencilbufferbits int32, contextid int32) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cdepthbufferbits, cdepthbufferbitsAllocMap := (C.int)(depthbufferbits), cgoAllocsUnknown
	cantialiasing, cantialiasingAllocMap := (C._Bool)(antialiasing), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_g4_render_target_format_t)(format), cgoAllocsUnknown
	cstencilbufferbits, cstencilbufferbitsAllocMap := (C.int)(stencilbufferbits), cgoAllocsUnknown
	ccontextid, ccontextidAllocMap := (C.int)(contextid), cgoAllocsUnknown
	C.kinc_g4_render_target_init(crendertarget, cwidth, cheight, cdepthbufferbits, cantialiasing, cformat, cstencilbufferbits, ccontextid)
	runtime.KeepAlive(ccontextidAllocMap)
	runtime.KeepAlive(cstencilbufferbitsAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cantialiasingAllocMap)
	runtime.KeepAlive(cdepthbufferbitsAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_init_cube function as declared in graphics4/rendertarget.h:38
func kinc_g4_render_target_init_cube(rendertarget *kinc_g4_render_target, cubemapsize int32, depthbufferbits int32, antialiasing bool, format kinc_g4_render_target_format, stencilbufferbits int32, contextid int32) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	ccubemapsize, ccubemapsizeAllocMap := (C.int)(cubemapsize), cgoAllocsUnknown
	cdepthbufferbits, cdepthbufferbitsAllocMap := (C.int)(depthbufferbits), cgoAllocsUnknown
	cantialiasing, cantialiasingAllocMap := (C._Bool)(antialiasing), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.kinc_g4_render_target_format_t)(format), cgoAllocsUnknown
	cstencilbufferbits, cstencilbufferbitsAllocMap := (C.int)(stencilbufferbits), cgoAllocsUnknown
	ccontextid, ccontextidAllocMap := (C.int)(contextid), cgoAllocsUnknown
	C.kinc_g4_render_target_init_cube(crendertarget, ccubemapsize, cdepthbufferbits, cantialiasing, cformat, cstencilbufferbits, ccontextid)
	runtime.KeepAlive(ccontextidAllocMap)
	runtime.KeepAlive(cstencilbufferbitsAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(cantialiasingAllocMap)
	runtime.KeepAlive(cdepthbufferbitsAllocMap)
	runtime.KeepAlive(ccubemapsizeAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_destroy function as declared in graphics4/rendertarget.h:41
func kinc_g4_render_target_destroy(rendertarget *kinc_g4_render_target) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	C.kinc_g4_render_target_destroy(crendertarget)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_use_color_as_texture function as declared in graphics4/rendertarget.h:43
func kinc_g4_render_target_use_color_as_texture(rendertarget *kinc_g4_render_target, unit kinc_g4_texture_unit) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	cunit, cunitAllocMap := unit.PassValue()
	C.kinc_g4_render_target_use_color_as_texture(crendertarget, cunit)
	runtime.KeepAlive(cunitAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_use_depth_as_texture function as declared in graphics4/rendertarget.h:44
func kinc_g4_render_target_use_depth_as_texture(rendertarget *kinc_g4_render_target, unit kinc_g4_texture_unit) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	cunit, cunitAllocMap := unit.PassValue()
	C.kinc_g4_render_target_use_depth_as_texture(crendertarget, cunit)
	runtime.KeepAlive(cunitAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_set_depth_stencil_from function as declared in graphics4/rendertarget.h:45
func kinc_g4_render_target_set_depth_stencil_from(rendertarget *kinc_g4_render_target, source *kinc_g4_render_target) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	csource, csourceAllocMap := source.PassRef() //unpackArgSKinc_g4_render_target(source)
	C.kinc_g4_render_target_set_depth_stencil_from(crendertarget, csource)
	//packSKinc_g4_render_target(source, csource)
	runtime.KeepAlive(csourceAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_get_pixels function as declared in graphics4/rendertarget.h:46
func kinc_g4_render_target_get_pixels(rendertarget *kinc_g4_render_target, data []byte) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	cdata, cdataAllocMap := copyPUint8Bytes((*sliceHeader)(unsafe.Pointer(&data)))
	C.kinc_g4_render_target_get_pixels(crendertarget, cdata)
	data = *(*[]byte)(unsafe.Pointer(cdata))
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_render_target_generate_mipmaps function as declared in graphics4/rendertarget.h:47
func kinc_g4_render_target_generate_mipmaps(rendertarget *kinc_g4_render_target, levels int32) {
	crendertarget, crendertargetAllocMap := rendertarget.PassRef()
	clevels, clevelsAllocMap := (C.int)(levels), cgoAllocsUnknown
	C.kinc_g4_render_target_generate_mipmaps(crendertarget, clevels)
	runtime.KeepAlive(clevelsAllocMap)
	runtime.KeepAlive(crendertargetAllocMap)
}

// kinc_g4_shader_init function as declared in graphics4/shader.h:23
func kinc_g4_shader_init(shader *kinc_g4_shader, data unsafe.Pointer, length uint, _type kinc_g4_shader_type) {
	cshader, cshaderAllocMap := shader.PassRef()
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	clength, clengthAllocMap := (C.size_t)(length), cgoAllocsUnknown
	c_type, c_typeAllocMap := (C.kinc_g4_shader_type_t)(_type), cgoAllocsUnknown
	C.kinc_g4_shader_init(cshader, cdata, clength, c_type)
	runtime.KeepAlive(c_typeAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cshaderAllocMap)
}

// kinc_g4_shader_init_from_source function as declared in graphics4/shader.h:24
func kinc_g4_shader_init_from_source(shader *kinc_g4_shader, source string, _type kinc_g4_shader_type) {
	cshader, cshaderAllocMap := shader.PassRef()
	csource, csourceAllocMap := unpackPCharString(source)
	c_type, c_typeAllocMap := (C.kinc_g4_shader_type_t)(_type), cgoAllocsUnknown
	C.kinc_g4_shader_init_from_source(cshader, csource, c_type)
	runtime.KeepAlive(c_typeAllocMap)
	runtime.KeepAlive(csourceAllocMap)
	runtime.KeepAlive(cshaderAllocMap)
}

// kinc_g4_shader_destroy function as declared in graphics4/shader.h:25
func kinc_g4_shader_destroy(shader *kinc_g4_shader) {
	cshader, cshaderAllocMap := shader.PassRef()
	C.kinc_g4_shader_destroy(cshader)
	runtime.KeepAlive(cshaderAllocMap)
}

// kinc_g1_init function as declared in graphics1/graphics.h:9
func kinc_g1_init(width int32, height int32) {
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	C.kinc_g1_init(cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
}

// kinc_g1_begin function as declared in graphics1/graphics.h:10
func kinc_g1_begin() {
	C.kinc_g1_begin()
}

// kinc_g1_end function as declared in graphics1/graphics.h:11
func kinc_g1_end() {
	C.kinc_g1_end()
}

// kinc_g1_set_pixel function as declared in graphics1/graphics.h:12
func kinc_g1_set_pixel(x int32, y int32, red float32, green float32, blue float32) {
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cred, credAllocMap := (C.float)(red), cgoAllocsUnknown
	cgreen, cgreenAllocMap := (C.float)(green), cgoAllocsUnknown
	cblue, cblueAllocMap := (C.float)(blue), cgoAllocsUnknown
	C.kinc_g1_set_pixel(cx, cy, cred, cgreen, cblue)
	runtime.KeepAlive(cblueAllocMap)
	runtime.KeepAlive(cgreenAllocMap)
	runtime.KeepAlive(credAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
}

// kinc_g1_width function as declared in graphics1/graphics.h:13
func kinc_g1_width() int32 {
	__ret := C.kinc_g1_width()
	__v := (int32)(__ret)
	return __v
}

// kinc_g1_height function as declared in graphics1/graphics.h:14
func kinc_g1_height() int32 {
	__ret := C.kinc_g1_height()
	__v := (int32)(__ret)
	return __v
}

// // kinc_acceleration_callback function as declared in input/acceleration.h:7
// func kinc_acceleration_callback(arg0 float32, arg1 float32, arg2 float32) {
// 	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.float)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
// 	C.kinc_acceleration_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_gamepad_axis_callback function as declared in input/gamepad.h:7
// func kinc_gamepad_axis_callback(arg0 int32, arg1 int32, arg2 float32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
// 	C.kinc_gamepad_axis_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_gamepad_button_callback function as declared in input/gamepad.h:8
// func kinc_gamepad_button_callback(arg0 int32, arg1 int32, arg2 float32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
// 	C.kinc_gamepad_button_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_gamepad_vendor function as declared in input/gamepad.h:9
func kinc_gamepad_vendor(gamepad int32) string {
	cgamepad, cgamepadAllocMap := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.kinc_gamepad_vendor(cgamepad)
	runtime.KeepAlive(cgamepadAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// kinc_gamepad_product_name function as declared in input/gamepad.h:10
func kinc_gamepad_product_name(gamepad int32) string {
	cgamepad, cgamepadAllocMap := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.kinc_gamepad_product_name(cgamepad)
	runtime.KeepAlive(cgamepadAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// kinc_internal_gamepad_trigger_axis function as declared in input/gamepad.h:12
func kinc_internal_gamepad_trigger_axis(gamepad int32, axis int32, value float32) {
	cgamepad, cgamepadAllocMap := (C.int)(gamepad), cgoAllocsUnknown
	caxis, caxisAllocMap := (C.int)(axis), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kinc_internal_gamepad_trigger_axis(cgamepad, caxis, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(caxisAllocMap)
	runtime.KeepAlive(cgamepadAllocMap)
}

// kinc_internal_gamepad_trigger_button function as declared in input/gamepad.h:13
func kinc_internal_gamepad_trigger_button(gamepad int32, button int32, value float32) {
	cgamepad, cgamepadAllocMap := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, cbuttonAllocMap := (C.int)(button), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kinc_internal_gamepad_trigger_button(cgamepad, cbutton, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cbuttonAllocMap)
	runtime.KeepAlive(cgamepadAllocMap)
}

// kinc_keyboard_show function as declared in input/keyboard.h:195
func kinc_keyboard_show() {
	C.kinc_keyboard_show()
}

// kinc_keyboard_hide function as declared in input/keyboard.h:196
func kinc_keyboard_hide() {
	C.kinc_keyboard_hide()
}

// kinc_keyboard_active function as declared in input/keyboard.h:197
func kinc_keyboard_active() bool {
	__ret := C.kinc_keyboard_active()
	__v := (bool)(__ret)
	return __v
}

// kinc_keyboard_key_down_callback function as declared in input/keyboard.h:199
// func kinc_keyboard_key_down_callback(arg0 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	C.kinc_keyboard_key_down_callback(carg0)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_keyboard_key_up_callback function as declared in input/keyboard.h:200
// func kinc_keyboard_key_up_callback(arg0 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	C.kinc_keyboard_key_up_callback(carg0)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_keyboard_key_press_callback function as declared in input/keyboard.h:201
// func kinc_keyboard_key_press_callback(arg0 uint32) {
// 	carg0, carg0AllocMap := (C.uint)(arg0), cgoAllocsUnknown
// 	C.kinc_keyboard_key_press_callback(carg0)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_internal_keyboard_trigger_key_down function as declared in input/keyboard.h:203
func kinc_internal_keyboard_trigger_key_down(key_code int32) {
	ckey_code, ckey_codeAllocMap := (C.int)(key_code), cgoAllocsUnknown
	C.kinc_internal_keyboard_trigger_key_down(ckey_code)
	runtime.KeepAlive(ckey_codeAllocMap)
}

// kinc_internal_keyboard_trigger_key_up function as declared in input/keyboard.h:204
func kinc_internal_keyboard_trigger_key_up(key_code int32) {
	ckey_code, ckey_codeAllocMap := (C.int)(key_code), cgoAllocsUnknown
	C.kinc_internal_keyboard_trigger_key_up(ckey_code)
	runtime.KeepAlive(ckey_codeAllocMap)
}

// kinc_internal_keyboard_trigger_key_press function as declared in input/keyboard.h:205
func kinc_internal_keyboard_trigger_key_press(character uint32) {
	ccharacter, ccharacterAllocMap := (C.uint)(character), cgoAllocsUnknown
	C.kinc_internal_keyboard_trigger_key_press(ccharacter)
	runtime.KeepAlive(ccharacterAllocMap)
}

// // kinc_mouse_press_callback function as declared in input/mouse.h:9
// func kinc_mouse_press_callback(arg0 int32, arg1 int32, arg2 int32, arg3 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
// 	C.kinc_mouse_press_callback(carg0, carg1, carg2, carg3)
// 	runtime.KeepAlive(carg3AllocMap)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_mouse_release_callback function as declared in input/mouse.h:10
// func kinc_mouse_release_callback(arg0 int32, arg1 int32, arg2 int32, arg3 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
// 	C.kinc_mouse_release_callback(carg0, carg1, carg2, carg3)
// 	runtime.KeepAlive(carg3AllocMap)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_mouse_move_callback function as declared in input/mouse.h:11
// func kinc_mouse_move_callback(arg0 int32, arg1 int32, arg2 int32, arg3 int32, arg4 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
// 	carg4, carg4AllocMap := (C.int)(arg4), cgoAllocsUnknown
// 	C.kinc_mouse_move_callback(carg0, carg1, carg2, carg3, carg4)
// 	runtime.KeepAlive(carg4AllocMap)
// 	runtime.KeepAlive(carg3AllocMap)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_mouse_scroll_callback function as declared in input/mouse.h:12
// func kinc_mouse_scroll_callback(arg0 int32, arg1 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	C.kinc_mouse_scroll_callback(carg0, carg1)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_mouse_enter_window_callback function as declared in input/mouse.h:13
// func kinc_mouse_enter_window_callback(arg0 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	C.kinc_mouse_enter_window_callback(carg0)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_mouse_leave_window_callback function as declared in input/mouse.h:14
// func kinc_mouse_leave_window_callback(arg0 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	C.kinc_mouse_leave_window_callback(carg0)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_mouse_can_lock function as declared in input/mouse.h:16
func kinc_mouse_can_lock(window int32) bool {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	__ret := C.kinc_mouse_can_lock(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (bool)(__ret)
	return __v
}

// kinc_mouse_is_locked function as declared in input/mouse.h:17
func kinc_mouse_is_locked(window int32) bool {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	__ret := C.kinc_mouse_is_locked(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
	__v := (bool)(__ret)
	return __v
}

// kinc_mouse_lock function as declared in input/mouse.h:18
func kinc_mouse_lock(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_mouse_lock(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_mouse_unlock function as declared in input/mouse.h:19
func kinc_mouse_unlock(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_mouse_unlock(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_mouse_show function as declared in input/mouse.h:21
func kinc_mouse_show() {
	C.kinc_mouse_show()
}

// kinc_mouse_hide function as declared in input/mouse.h:22
func kinc_mouse_hide() {
	C.kinc_mouse_hide()
}

// kinc_mouse_set_position function as declared in input/mouse.h:23
func kinc_mouse_set_position(window int32, x int32, y int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_mouse_set_position(cwindow, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_mouse_get_position function as declared in input/mouse.h:24
func kinc_mouse_get_position(window int32, x *int32, y *int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cx, cxAllocMap := (*C.int)(x), cgoAllocsUnknown //copyPIntBytes((*sliceHeader)(unsafe.Pointer(&x)))
	cy, cyAllocMap := (*C.int)(y), cgoAllocsUnknown //copyPIntBytes((*sliceHeader)(unsafe.Pointer(&y)))
	C.kinc_mouse_get_position(cwindow, cx, cy)
	x = (*int32)(cx)
	y = (*int32)(cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_trigger_press function as declared in input/mouse.h:26
func kinc_internal_mouse_trigger_press(window int32, button int32, x int32, y int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cbutton, cbuttonAllocMap := (C.int)(button), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_internal_mouse_trigger_press(cwindow, cbutton, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cbuttonAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_trigger_release function as declared in input/mouse.h:27
func kinc_internal_mouse_trigger_release(window int32, button int32, x int32, y int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cbutton, cbuttonAllocMap := (C.int)(button), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_internal_mouse_trigger_release(cwindow, cbutton, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cbuttonAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_trigger_move function as declared in input/mouse.h:28
func kinc_internal_mouse_trigger_move(window int32, x int32, y int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_internal_mouse_trigger_move(cwindow, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_trigger_scroll function as declared in input/mouse.h:29
func kinc_internal_mouse_trigger_scroll(window int32, delta int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cdelta, cdeltaAllocMap := (C.int)(delta), cgoAllocsUnknown
	C.kinc_internal_mouse_trigger_scroll(cwindow, cdelta)
	runtime.KeepAlive(cdeltaAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_trigger_enter_window function as declared in input/mouse.h:30
func kinc_internal_mouse_trigger_enter_window(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_internal_mouse_trigger_enter_window(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_trigger_leave_window function as declared in input/mouse.h:31
func kinc_internal_mouse_trigger_leave_window(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_internal_mouse_trigger_leave_window(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_lock function as declared in input/mouse.h:32
func kinc_internal_mouse_lock(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_internal_mouse_lock(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_unlock function as declared in input/mouse.h:33
func kinc_internal_mouse_unlock(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_internal_mouse_unlock(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_window_activated function as declared in input/mouse.h:34
func kinc_internal_mouse_window_activated(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_internal_mouse_window_activated(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_mouse_window_deactivated function as declared in input/mouse.h:35
func kinc_internal_mouse_window_deactivated(window int32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	C.kinc_internal_mouse_window_deactivated(cwindow)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_pen_press_callback function as declared in input/pen.h:7
// func kinc_pen_press_callback(arg0 int32, arg1 int32, arg2 int32, arg3 float32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	carg3, carg3AllocMap := (C.float)(arg3), cgoAllocsUnknown
// 	C.kinc_pen_press_callback(carg0, carg1, carg2, carg3)
// 	runtime.KeepAlive(carg3AllocMap)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_pen_move_callback function as declared in input/pen.h:8
// func kinc_pen_move_callback(arg0 int32, arg1 int32, arg2 int32, arg3 float32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	carg3, carg3AllocMap := (C.float)(arg3), cgoAllocsUnknown
// 	C.kinc_pen_move_callback(carg0, carg1, carg2, carg3)
// 	runtime.KeepAlive(carg3AllocMap)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_pen_release_callback function as declared in input/pen.h:9
// func kinc_pen_release_callback(arg0 int32, arg1 int32, arg2 int32, arg3 float32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	carg3, carg3AllocMap := (C.float)(arg3), cgoAllocsUnknown
// 	C.kinc_pen_release_callback(carg0, carg1, carg2, carg3)
// 	runtime.KeepAlive(carg3AllocMap)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_internal_pen_trigger_move function as declared in input/pen.h:11
func kinc_internal_pen_trigger_move(window int32, x int32, y int32, pressure float32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cpressure, cpressureAllocMap := (C.float)(pressure), cgoAllocsUnknown
	C.kinc_internal_pen_trigger_move(cwindow, cx, cy, cpressure)
	runtime.KeepAlive(cpressureAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_pen_trigger_press function as declared in input/pen.h:12
func kinc_internal_pen_trigger_press(window int32, x int32, y int32, pressure float32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cpressure, cpressureAllocMap := (C.float)(pressure), cgoAllocsUnknown
	C.kinc_internal_pen_trigger_press(cwindow, cx, cy, cpressure)
	runtime.KeepAlive(cpressureAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_internal_pen_trigger_release function as declared in input/pen.h:13
func kinc_internal_pen_trigger_release(window int32, x int32, y int32, pressure float32) {
	cwindow, cwindowAllocMap := (C.int)(window), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cpressure, cpressureAllocMap := (C.float)(pressure), cgoAllocsUnknown
	C.kinc_internal_pen_trigger_release(cwindow, cx, cy, cpressure)
	runtime.KeepAlive(cpressureAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cwindowAllocMap)
}

// kinc_rotation_callback function as declared in input/rotation.h:7
// func kinc_rotation_callback(arg0 float32, arg1 float32, arg2 float32) {
// 	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.float)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
// 	C.kinc_rotation_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_surface_touch_start_callback function as declared in input/surface.h:7
// func kinc_surface_touch_start_callback(arg0 int32, arg1 int32, arg2 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	C.kinc_surface_touch_start_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_surface_move_callback function as declared in input/surface.h:8
// func kinc_surface_move_callback(arg0 int32, arg1 int32, arg2 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	C.kinc_surface_move_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// // kinc_surface_touch_end_callback function as declared in input/surface.h:9
// func kinc_surface_touch_end_callback(arg0 int32, arg1 int32, arg2 int32) {
// 	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
// 	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
// 	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
// 	C.kinc_surface_touch_end_callback(carg0, carg1, carg2)
// 	runtime.KeepAlive(carg2AllocMap)
// 	runtime.KeepAlive(carg1AllocMap)
// 	runtime.KeepAlive(carg0AllocMap)
// }

// kinc_internal_surface_trigger_touch_start function as declared in input/surface.h:11
func kinc_internal_surface_trigger_touch_start(index int32, x int32, y int32) {
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_internal_surface_trigger_touch_start(cindex, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cindexAllocMap)
}

// kinc_internal_surface_trigger_move function as declared in input/surface.h:12
func kinc_internal_surface_trigger_move(index int32, x int32, y int32) {
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_internal_surface_trigger_move(cindex, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cindexAllocMap)
}

// kinc_internal_surface_trigger_touch_end function as declared in input/surface.h:13
func kinc_internal_surface_trigger_touch_end(index int32, x int32, y int32) {
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.kinc_internal_surface_trigger_touch_end(cindex, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cindexAllocMap)
}

// kinc_sin function as declared in math/core.h:10
func kinc_sin(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_sin(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_cos function as declared in math/core.h:11
func kinc_cos(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_cos(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_tan function as declared in math/core.h:12
func kinc_tan(x float32) float32 {
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	__ret := C.kinc_tan(cx)
	runtime.KeepAlive(cxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_cot function as declared in math/core.h:13
func kinc_cot(x float32) float32 {
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	__ret := C.kinc_cot(cx)
	runtime.KeepAlive(cxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_round function as declared in math/core.h:14
func kinc_round(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_round(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_ceil function as declared in math/core.h:15
func kinc_ceil(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_ceil(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_pow function as declared in math/core.h:16
func kinc_pow(value float32, exponent float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	cexponent, cexponentAllocMap := (C.float)(exponent), cgoAllocsUnknown
	__ret := C.kinc_pow(cvalue, cexponent)
	runtime.KeepAlive(cexponentAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_max_float function as declared in math/core.h:17
func kinc_max_float() float32 {
	__ret := C.kinc_max_float()
	__v := (float32)(__ret)
	return __v
}

// kinc_sqrt function as declared in math/core.h:18
func kinc_sqrt(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_sqrt(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_abs function as declared in math/core.h:19
func kinc_abs(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_abs(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_asin function as declared in math/core.h:20
func kinc_asin(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_asin(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_acos function as declared in math/core.h:21
func kinc_acos(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_acos(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_atan function as declared in math/core.h:22
func kinc_atan(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_atan(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_atan2 function as declared in math/core.h:23
func kinc_atan2(y float32, x float32) float32 {
	cy, cyAllocMap := (C.float)(y), cgoAllocsUnknown
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	__ret := C.kinc_atan2(cy, cx)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cyAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_floor function as declared in math/core.h:24
func kinc_floor(value float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.kinc_floor(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_mod function as declared in math/core.h:25
func kinc_mod(numer float32, denom float32) float32 {
	cnumer, cnumerAllocMap := (C.float)(numer), cgoAllocsUnknown
	cdenom, cdenomAllocMap := (C.float)(denom), cgoAllocsUnknown
	__ret := C.kinc_mod(cnumer, cdenom)
	runtime.KeepAlive(cdenomAllocMap)
	runtime.KeepAlive(cnumerAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_exp function as declared in math/core.h:26
func kinc_exp(exponent float32) float32 {
	cexponent, cexponentAllocMap := (C.float)(exponent), cgoAllocsUnknown
	__ret := C.kinc_exp(cexponent)
	runtime.KeepAlive(cexponentAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_min function as declared in math/core.h:27
func kinc_min(a float32, b float32) float32 {
	ca, caAllocMap := (C.float)(a), cgoAllocsUnknown
	cb, cbAllocMap := (C.float)(b), cgoAllocsUnknown
	__ret := C.kinc_min(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_max function as declared in math/core.h:28
func kinc_max(a float32, b float32) float32 {
	ca, caAllocMap := (C.float)(a), cgoAllocsUnknown
	cb, cbAllocMap := (C.float)(b), cgoAllocsUnknown
	__ret := C.kinc_max(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_mini function as declared in math/core.h:29
func kinc_mini(a int32, b int32) int32 {
	ca, caAllocMap := (C.int)(a), cgoAllocsUnknown
	cb, cbAllocMap := (C.int)(b), cgoAllocsUnknown
	__ret := C.kinc_mini(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_maxi function as declared in math/core.h:30
func kinc_maxi(a int32, b int32) int32 {
	ca, caAllocMap := (C.int)(a), cgoAllocsUnknown
	cb, cbAllocMap := (C.int)(b), cgoAllocsUnknown
	__ret := C.kinc_maxi(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (int32)(__ret)
	return __v
}

// kinc_clamp function as declared in math/core.h:31
func kinc_clamp(value float32, minvalue float32, maxvalue float32) float32 {
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	cminvalue, cminvalueAllocMap := (C.float)(minvalue), cgoAllocsUnknown
	cmaxvalue, cmaxvalueAllocMap := (C.float)(maxvalue), cgoAllocsUnknown
	__ret := C.kinc_clamp(cvalue, cminvalue, cmaxvalue)
	runtime.KeepAlive(cmaxvalueAllocMap)
	runtime.KeepAlive(cminvalueAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_float32x4_load function as declared in simd/float32x4.h:141
func kinc_float32x4_load(a float32, b float32, c float32, d float32) kinc_float32x4 {
	ca, caAllocMap := (C.float)(a), cgoAllocsUnknown
	cb, cbAllocMap := (C.float)(b), cgoAllocsUnknown
	cc, ccAllocMap := (C.float)(c), cgoAllocsUnknown
	cd, cdAllocMap := (C.float)(d), cgoAllocsUnknown
	__ret := C.kinc_float32x4_load(ca, cb, cc, cd)
	runtime.KeepAlive(cdAllocMap)
	runtime.KeepAlive(ccAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_load_all function as declared in simd/float32x4.h:150
func kinc_float32x4_load_all(t float32) kinc_float32x4 {
	ct, ctAllocMap := (C.float)(t), cgoAllocsUnknown
	__ret := C.kinc_float32x4_load_all(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_get function as declared in simd/float32x4.h:159
func kinc_float32x4_get(t kinc_float32x4, index int32) float32 {
	ct, ctAllocMap := t.PassValue()
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	__ret := C.kinc_float32x4_get(ct, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(ctAllocMap)
	__v := (float32)(__ret)
	return __v
}

// kinc_float32x4_abs function as declared in simd/float32x4.h:163
func kinc_float32x4_abs(t kinc_float32x4) kinc_float32x4 {
	ct, ctAllocMap := t.PassValue()
	__ret := C.kinc_float32x4_abs(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_add function as declared in simd/float32x4.h:172
func kinc_float32x4_add(a kinc_float32x4, b kinc_float32x4) kinc_float32x4 {
	ca, caAllocMap := a.PassValue()
	cb, cbAllocMap := b.PassValue()
	__ret := C.kinc_float32x4_add(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_div function as declared in simd/float32x4.h:181
func kinc_float32x4_div(a kinc_float32x4, b kinc_float32x4) kinc_float32x4 {
	ca, caAllocMap := a.PassValue()
	cb, cbAllocMap := b.PassValue()
	__ret := C.kinc_float32x4_div(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_mul function as declared in simd/float32x4.h:190
func kinc_float32x4_mul(a kinc_float32x4, b kinc_float32x4) kinc_float32x4 {
	ca, caAllocMap := a.PassValue()
	cb, cbAllocMap := b.PassValue()
	__ret := C.kinc_float32x4_mul(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_neg function as declared in simd/float32x4.h:199
func kinc_float32x4_neg(t kinc_float32x4) kinc_float32x4 {
	ct, ctAllocMap := t.PassValue()
	__ret := C.kinc_float32x4_neg(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_reciprocal_approximation function as declared in simd/float32x4.h:208
func kinc_float32x4_reciprocal_approximation(t kinc_float32x4) kinc_float32x4 {
	ct, ctAllocMap := t.PassValue()
	__ret := C.kinc_float32x4_reciprocal_approximation(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_reciprocal_sqrt_approximation function as declared in simd/float32x4.h:217
func kinc_float32x4_reciprocal_sqrt_approximation(t kinc_float32x4) kinc_float32x4 {
	ct, ctAllocMap := t.PassValue()
	__ret := C.kinc_float32x4_reciprocal_sqrt_approximation(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_sub function as declared in simd/float32x4.h:226
func kinc_float32x4_sub(a kinc_float32x4, b kinc_float32x4) kinc_float32x4 {
	ca, caAllocMap := a.PassValue()
	cb, cbAllocMap := b.PassValue()
	__ret := C.kinc_float32x4_sub(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}

// kinc_float32x4_sqrt function as declared in simd/float32x4.h:235
func kinc_float32x4_sqrt(t kinc_float32x4) kinc_float32x4 {
	ct, ctAllocMap := t.PassValue()
	__ret := C.kinc_float32x4_sqrt(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := *Newkinc_float32x4Ref(unsafe.Pointer(&__ret))
	return __v
}
